diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/Kconfig.default micode_selene-r-oss-update/drivers/misc/mediatek/Kconfig.default
--- old-micode_selene-r-oss/drivers/misc/mediatek/Kconfig.default	2023-09-30 14:32:14.568000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/Kconfig.default	2023-09-30 10:01:15.392000012 +0700
@@ -211,7 +211,6 @@
 	select PPPOL2TP
 	select PPTP
 	select PREEMPT
-	select PROCESS_RECLAIM
 	select PROC_FS
 	select PROFILING
 	select PSI
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/Makefile micode_selene-r-oss-update/drivers/misc/mediatek/Makefile
--- old-micode_selene-r-oss/drivers/misc/mediatek/Makefile	2023-09-30 14:32:14.568000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/Makefile	2023-09-30 10:01:15.392000012 +0700
@@ -1,6 +1,5 @@
 #
 # Copyright (C) 2018 MediaTek Inc.
-# Copyright (C) 2021 XiaoMi, Inc.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License version 2 as
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/accdet/mt6358/accdet.c micode_selene-r-oss-update/drivers/misc/mediatek/accdet/mt6358/accdet.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/accdet/mt6358/accdet.c	2023-09-30 14:32:14.572000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/accdet/mt6358/accdet.c	2023-09-30 10:01:15.396000012 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2017 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/aee/aed/monitor_hang.c micode_selene-r-oss-update/drivers/misc/mediatek/aee/aed/monitor_hang.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/aee/aed/monitor_hang.c	2023-09-30 14:32:14.576000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/aee/aed/monitor_hang.c	2023-09-30 10:01:15.404000012 +0700
@@ -286,12 +286,8 @@
 	if (cmd == AEEIOCTL_SET_HANG_REBOOT &&
 		(!strncmp(current->comm, "init", 4))) {
 		reboot_flag = true;
-#ifdef CONFIG_MTK_ENG_BUILD
-		hang_detect_counter = 3;
-#else
-		hang_detect_counter = 1;
-#endif
-		hd_timeout = 3;
+		hang_detect_counter = 5;
+		hd_timeout = 5;
 		pr_info("hang_detect: %s set reboot command.\n", current->comm);
 		return ret;
 	}
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_dram.c micode_selene-r-oss-update/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_dram.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_dram.c	2023-09-30 14:32:14.712000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_dram.c	2023-09-30 10:01:15.528000012 +0700
@@ -115,6 +115,7 @@
 		ddrphy_num = ARRAY_SIZE(ddrphy_setting_lp4_2ch);
 		break;
 	case SPMFW_LP4X_2CH_3600:
+	case SPMFW_LP4X_2CH_3200:
 		ddrphy_setting = ddrphy_setting_lp4_2ch;
 		ddrphy_num = ARRAY_SIZE(ddrphy_setting_lp4_2ch);
 		break;
@@ -170,6 +171,8 @@
 		spmfw_idx = SPMFW_LP4_2CH_3200;
 	else if (ddr_type == TYPE_LPDDR4X && ddr_hz == 3600)
 		spmfw_idx = SPMFW_LP4X_2CH_3600;
+	else if (ddr_type == TYPE_LPDDR4X && ddr_hz == 3200)
+		spmfw_idx = SPMFW_LP4X_2CH_3200;
 	else if (ddr_type == TYPE_LPDDR3 && ddr_hz == 1866)
 		spmfw_idx = SPMFW_LP3_1CH_1866;
 
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_internal.h micode_selene-r-oss-update/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_internal.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_internal.h	2023-09-30 14:32:14.712000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/base/power/spm/mt6768/mtk_spm_internal.h	2023-09-30 10:01:15.528000012 +0700
@@ -251,6 +251,7 @@
 enum {
 	SPMFW_LP4_2CH_3200 = 0,
 	SPMFW_LP4X_2CH_3600,
+	SPMFW_LP4X_2CH_3200,
 	SPMFW_LP3_1CH_1866,
 };
 
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/cam_cal/src/mt6768/cam_cal_list.c micode_selene-r-oss-update/drivers/misc/mediatek/cam_cal/src/mt6768/cam_cal_list.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/cam_cal/src/mt6768/cam_cal_list.c	2023-09-30 14:32:14.736000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/cam_cal/src/mt6768/cam_cal_list.c	2023-09-30 10:01:15.548000012 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2018 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -66,6 +65,10 @@
 	{OV8856_AAC_FRONT_SENSOR_INDIA_ID, 0xA2, Common_read_region},
 	{GC02M1B_SUNNY_SENSOR_INDIA_ID, 0xA2, gc02m1_read_otp_info},
 	{OV02B1B_OFILM_SENSOR_INDIA_ID, 0xA2, ov02b1b_read_otp_info},
+	{S5KJN1_OFILM_MAIN_SENSOR_CN_ID, 0xA2, Common_read_region},
+	{OV50C40_QTECH_MAIN_SENSOR_CN_ID, 0xA2, Common_read_region},
+	{IMX355_SUNNY_ULTRA_SENSOR_CN_ID, 0xA0, Common_read_region},
+	{IMX355_AAC_ULTRA_SENSOR_CN_ID, 0xA0, Common_read_region},
 #endif
 #ifdef CONFIG_TARGET_PRODUCT_SHIVACOMMON
 	{OV13B10_OFILM_SENSOR_ID, 0xA2, Common_read_region},
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/cameraisp/src/mt6768/camera_isp.c micode_selene-r-oss-update/drivers/misc/mediatek/cameraisp/src/mt6768/camera_isp.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/cameraisp/src/mt6768/camera_isp.c	2023-09-30 14:32:14.784000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/cameraisp/src/mt6768/camera_isp.c	2023-09-30 10:01:15.584000012 +0700
@@ -650,6 +650,11 @@
  */
 static unsigned int g_regScen = 0xa5a5a5a5; /* remove later */
 
+static unsigned int g_virtual_cq_cnt[2] = {0, 0};
+static unsigned int g_virtual_cq_cnt_a;
+static unsigned int g_virtual_cq_cnt_b;
+static  spinlock_t  virtual_cqcnt_lock;
+
 
 static /*volatile*/ wait_queue_head_t P2WaitQueueHead_WaitDeque;
 static /*volatile*/ wait_queue_head_t P2WaitQueueHead_WaitFrame;
@@ -8944,6 +8949,26 @@
 		}
 		LOG_NOTICE("ISP_SET_SEC_ENABLE sec_on = %d\n", sec_on);
 		break;
+	case ISP_SET_VIR_CQCNT:
+		spin_lock((spinlock_t *)(&virtual_cqcnt_lock));
+		if (copy_from_user(&g_virtual_cq_cnt, (void *)Param,
+			sizeof(unsigned int)*2) == 0) {
+			LOG_NOTICE("From hw_module:%d Virtual CQ count from user land : %d\n",
+			g_virtual_cq_cnt[0], g_virtual_cq_cnt[1]);
+		} else {
+			LOG_NOTICE(
+				"Virtual CQ count copy_from_user failed\n");
+			Ret = -EFAULT;
+		}
+		if (g_virtual_cq_cnt[0] == 0) {
+			g_virtual_cq_cnt_a = g_virtual_cq_cnt[1];
+			LOG_NOTICE("Update Virtual CQ cnt for hw_module:0\n");
+		} else if (g_virtual_cq_cnt[0] == 1) {
+			g_virtual_cq_cnt_b = g_virtual_cq_cnt[1];
+			LOG_NOTICE("Update Virtual CQ cnt for hw_module:1\n");
+		}
+		spin_unlock((spinlock_t *)(&virtual_cqcnt_lock));
+		break;
 	default:
 	{
 		LOG_NOTICE("Unknown Cmd(%d)\n", Cmd);
@@ -9424,6 +9449,7 @@
 	case ISP_SET_PM_QOS_INFO:
 	case ISP_SET_PM_QOS:
 	case ISP_SET_SEC_DAPC_REG:
+	case ISP_SET_VIR_CQCNT:
 		return filp->f_op->unlocked_ioctl(filp, cmd, arg);
 	default:
 		return -ENOIOCTLCMD;
@@ -10324,6 +10350,7 @@
 		spin_lock_init(&(SpinLock_P2FrameList));
 		spin_lock_init(&(SpinLockRegScen));
 		spin_lock_init(&(SpinLock_UserKey));
+		spin_lock_init(&(virtual_cqcnt_lock));
 		#ifdef ENABLE_KEEP_ION_HANDLE
 		for (i = 0; i < ISP_DEV_NODE_NUM; i++) {
 			if (gION_TBL[i].node != ISP_DEV_NODE_NUM) {
@@ -14809,9 +14836,18 @@
 	spin_unlock(&(IspInfo.SpinLockIrq[module]));
 	/*  */
 	if (IrqStatus & SOF_INT_ST) {
-		wake_up_interruptible(&IspInfo.WaitQHeadCam
-			[ISP_GetWaitQCamIndex(module)]
-			[ISP_WAITQ_HEAD_IRQ_SOF]);
+		if ((ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100) != g_virtual_cq_cnt_a) {
+			IRQ_LOG_KEEPER(module, m_CurrentPPB, _LOG_INF,
+			"CAMA PHY cqcnt:%d != VIR cqcnt:%d\n",
+			(ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100), g_virtual_cq_cnt_a);
+		} else {
+			IRQ_LOG_KEEPER(module, m_CurrentPPB, _LOG_INF,
+			"CAMA PHY cqcnt:%d VIR cqcnt:%d\n",
+			(ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100), g_virtual_cq_cnt_a);
+			wake_up_interruptible(&IspInfo.WaitQHeadCam
+				[ISP_GetWaitQCamIndex(module)]
+				[ISP_WAITQ_HEAD_IRQ_SOF]);
+		}
 	}
 	if (IrqStatus & SW_PASS1_DON_ST) {
 		wake_up_interruptible(&IspInfo.WaitQHeadCam
@@ -15418,9 +15454,18 @@
 	spin_unlock(&(IspInfo.SpinLockIrq[module]));
 	/*  */
 	if (IrqStatus & SOF_INT_ST) {
-		wake_up_interruptible(&IspInfo.WaitQHeadCam
+		if ((ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100) != g_virtual_cq_cnt_b) {
+			IRQ_LOG_KEEPER(module, m_CurrentPPB, _LOG_INF,
+			"CAMB PHY cqcnt:%d != VIR cqcnt:%d\n",
+			(ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100), g_virtual_cq_cnt_b);
+		} else {
+			IRQ_LOG_KEEPER(module, m_CurrentPPB, _LOG_INF,
+			"CAMB PHY cqcnt:%d VIR cqcnt:%d\n",
+			(ISP_RD32(CAM_REG_CTL_SPARE2(reg_module))%0x100), g_virtual_cq_cnt_b);
+			wake_up_interruptible(&IspInfo.WaitQHeadCam
 			[ISP_GetWaitQCamIndex(module)]
 			[ISP_WAITQ_HEAD_IRQ_SOF]);
+		}
 	}
 	if (IrqStatus & SW_PASS1_DON_ST) {
 		wake_up_interruptible(&IspInfo.WaitQHeadCam
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/cameraisp/src/mt6768/inc/camera_isp.h micode_selene-r-oss-update/drivers/misc/mediatek/cameraisp/src/mt6768/inc/camera_isp.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/cameraisp/src/mt6768/inc/camera_isp.h	2023-09-30 14:32:14.784000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/cameraisp/src/mt6768/inc/camera_isp.h	2023-09-30 10:01:15.588000012 +0700
@@ -685,8 +685,9 @@
 	ISP_CMD_SET_PM_QOS,
 	ISP_CMD_SET_PM_QOS_INFO,
 	ISP_CMD_TRANSFOR_CCU_REG,
-	ISP_CMD_SET_SEC_DAPC_REG,
-	ISP_CMD_SET_SEC_ENABLE
+	ISP_CMD_SET_SEC_ENABLE,
+	ISP_CMD_SET_VIR_CQCNT,
+	ISP_CMD_SET_SEC_DAPC_REG
 };
 
 enum ISP_HALT_DMA_ENUM {
@@ -805,6 +806,8 @@
 	_IOWR(ISP_MAGIC, ISP_CMD_TRANSFOR_CCU_REG,  unsigned char*)
 #define ISP_SET_SEC_ENABLE \
 	_IOW(ISP_MAGIC, ISP_CMD_SET_SEC_ENABLE, unsigned int)
+#define ISP_SET_VIR_CQCNT \
+	_IOWR(ISP_MAGIC, ISP_CMD_SET_VIR_CQCNT, unsigned int)
 
 #ifdef CONFIG_COMPAT
 #define COMPAT_ISP_READ_REGISTER      \
@@ -847,6 +850,8 @@
 #define COMPAT_ISP_SET_MEM_INFO       \
 	_IOWR(ISP_MAGIC, ISP_CMD_SET_MEM_INFO, \
 					struct compat_ISP_MEM_INFO_STRUCT)
+#define COMPAT_ISP_SET_VIR_CQCNT      \
+	_IOWR(ISP_MAGIC, ISP_CMD_SET_VIR_CQCNT, unsigned int)
 #endif
 
 int32_t ISP_MDPClockOnCallback(uint64_t engineFlag);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/dramc/mt6768/mtk_dramc.c micode_selene-r-oss-update/drivers/misc/mediatek/dramc/mt6768/mtk_dramc.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/dramc/mt6768/mtk_dramc.c	2023-09-30 14:32:15.096000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/dramc/mt6768/mtk_dramc.c	2023-09-30 10:01:15.864000012 +0700
@@ -38,6 +38,7 @@
 #include "mt_emi_api.h"
 #endif
 
+static unsigned int lp4x_highfreq_3600;
 static unsigned int lp4_highest_freq;
 
 void __iomem *DRAMC_AO_CHA_BASE_ADDR;
@@ -743,7 +744,7 @@
 		if (DRAM_TYPE == TYPE_LPDDR3)
 			freq = 1866;
 		else if (DRAM_TYPE == TYPE_LPDDR4X)
-			freq = 3600;
+			freq = (lp4x_highfreq_3600) ? 3600 : 3200;
 		else if (DRAM_TYPE == TYPE_LPDDR4)
 			freq = lp4_highest_freq;
 		break;
@@ -874,7 +875,12 @@
 #else
 	DRAM_TYPE = TYPE_LPDDR4X;
 #endif
-	dramc_info("dram type =%d\n", DRAM_TYPE);
+	if (get_dram_data_rate() == 3600)
+		lp4x_highfreq_3600 = 1;
+	else
+		lp4x_highfreq_3600 = 0;
+
+	dramc_info("lp4x_highfreq_3600 = %d\n", lp4x_highfreq_3600);
 
 	if (!DRAM_TYPE) {
 		dramc_info("dram type error !!\n");
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/dws/mt6768/eos.dws micode_selene-r-oss-update/drivers/misc/mediatek/dws/mt6768/eos.dws
--- old-micode_selene-r-oss/drivers/misc/mediatek/dws/mt6768/eos.dws	2023-09-30 14:32:15.096000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/dws/mt6768/eos.dws	2023-09-30 10:01:15.864000012 +0700
@@ -669,23 +669,23 @@
             </gpio49>
             <gpio50>
                 <eint_mode>false</eint_mode>
-                <def_mode>1</def_mode>
+                <def_mode>3</def_mode>
                 <inpull_en>true</inpull_en>
                 <inpull_selhigh>true</inpull_selhigh>
                 <def_dir>IN</def_dir>
                 <out_high>false</out_high>
-                <varName0>GPIO_I2C3_SCA_PIN</varName0>
+                <varName0>GPIO_SENSOR0_I2C_SCL1</varName0>
                 <smt>true</smt>
                 <ies>true</ies>
             </gpio50>
             <gpio51>
                 <eint_mode>false</eint_mode>
-                <def_mode>1</def_mode>
+                <def_mode>3</def_mode>
                 <inpull_en>true</inpull_en>
                 <inpull_selhigh>true</inpull_selhigh>
                 <def_dir>IN</def_dir>
                 <out_high>false</out_high>
-                <varName0>GPIO_I2C3_SDA_PIN</varName0>
+                <varName0>GPIO_SENSOR0_I2C_SDA1</varName0>
                 <smt>true</smt>
                 <ies>true</ies>
             </gpio51>
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/inc/kd_imgsensor.h micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/inc/kd_imgsensor.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/inc/kd_imgsensor.h	2023-09-30 14:32:16.692000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/inc/kd_imgsensor.h	2023-09-30 10:01:17.516000012 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -158,8 +157,11 @@
 #define IMX058_SENSOR_ID                        0x0058
 #define IMX355_SUNNY_ULTRA_SENSOR_ID (0x355 + 1)
 #define IMX355_SUNNY_ULTRA_SENSOR_INDIA_ID (0x355 + 4)
+#define IMX355_SUNNY_ULTRA_SENSOR_CN_ID (0x355 + 6)
 #define IMX355_AAC_ULTRA_SENSOR_ID 0x355
 #define IMX355_AAC_ULTRA_SENSOR_INDIA_ID 0x358
+#define IMX355_AAC_ULTRA_SENSOR_CN_ID (0x355 + 5)
+
 /*OV*/
 #define OV23850_SENSOR_ID                       0x023850
 #define OV16880_SENSOR_ID                       0x016880
@@ -225,8 +227,11 @@
 #define OV50C40_OFILM_MAIN_SENSOR_INDIA_ID               0x565046
 #define S5KJN1_OFILM_MAIN_SENSOR_ID                0x38e1
 #define S5KJN1_OFILM_MAIN_SENSOR_INDIA_ID                0x38e4
+#define S5KJN1_OFILM_MAIN_SENSOR_CN_ID             (0x38e1 + 5)
 #define OV50C40_QTECH_MAIN_SENSOR_ID               (0x565043+1)
 #define OV50C40_QTECH_MAIN_SENSOR_INDIA_ID               (0x565043+4)
+#define OV50C40_QTECH_MAIN_SENSOR_CN_ID             (0x565044 +5)
+
 #define OV13B10_OFILM_SENSOR_ID                 0x560D44
 #define OV13B10_QTECH_SENSOR_ID                 0x560D45
 #define S5K3L6_QTECH_SENSOR_ID                 0x30C6
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/common/v1/imgsensor_hw.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/common/v1/imgsensor_hw.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/common/v1/imgsensor_hw.c	2023-09-30 14:32:16.704000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/common/v1/imgsensor_hw.c	2023-09-30 10:01:17.524000012 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2017 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -177,6 +176,19 @@
 				    IMGSENSOR_HW_PIN_DOVDD,
 				    IMGSENSOR_HW_PIN_STATE_LEVEL_1800);
 			}
+
+		if ((sensor_idx == IMGSENSOR_SENSOR_IDX_SUB || sensor_idx == IMGSENSOR_SENSOR_IDX_MAIN2) &&
+		    ppwr_info->pin ==IMGSENSOR_HW_PIN_AVDD)
+		{
+		    pdev = phw->pdev[psensor_pwr_Mi->id[IMGSENSOR_HW_PIN_DOVDD]];
+
+		    if (pdev->set != NULL)
+		        pdev->set(
+		            pdev->pinstance,
+		            IMGSENSOR_SENSOR_IDX_SUB2,
+		            IMGSENSOR_HW_PIN_DOVDD,
+		            IMGSENSOR_HW_PIN_STATE_LEVEL_1800);
+		}
 #endif
 		}
 
@@ -214,6 +226,19 @@
 					    IMGSENSOR_HW_PIN_DOVDD,
 					    IMGSENSOR_HW_PIN_STATE_LEVEL_0);
 	}
+
+	if ((sensor_idx == IMGSENSOR_SENSOR_IDX_SUB || sensor_idx == IMGSENSOR_SENSOR_IDX_MAIN2) &&
+	    ppwr_info->pin ==IMGSENSOR_HW_PIN_AVDD)
+	{
+	    pdev = phw->pdev[psensor_pwr_Mi->id[IMGSENSOR_HW_PIN_DOVDD]];
+
+	    if (pdev->set != NULL)
+	        pdev->set(
+	            pdev->pinstance,
+	            IMGSENSOR_SENSOR_IDX_SUB2,
+	            IMGSENSOR_HW_PIN_DOVDD,
+	            IMGSENSOR_HW_PIN_STATE_LEVEL_0);
+	}
 #endif
 			}
 		}
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.c	2023-09-30 14:32:16.804000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.c	2023-09-30 10:01:17.828000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -168,6 +167,42 @@
 		.mipi_pixel_rate = 281600000,
 		.max_framerate = 300,
 	},
+	.hs_video = {
+		.pclk = 281600000,
+		.linelength = 3672,
+		.framelength = 2556,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 3280,
+		.grabwindow_height = 2464,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 281600000,
+		.max_framerate = 300,
+	},
+	.slim_video = {
+		.pclk = 281600000,
+		.linelength = 3672,
+		.framelength = 2556,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 3280,
+		.grabwindow_height = 2464,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 281600000,
+		.max_framerate = 300,
+	},
+	.custom1 = {
+		.pclk = 201592800,
+		.linelength = 1836,
+		.framelength = 3660,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 1640,
+		.grabwindow_height = 1232,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 202226949,
+		.max_framerate = 300,
+	},
 
 	.margin = 10,		/* sensor framelength & shutter margin */
 	.min_shutter = 20,	/* min shutter */
@@ -192,10 +227,13 @@
 	.ihdr_support = 0,	/* 1, support; 0,not support */
 	.ihdr_le_firstline = 0,	/* 1,le first ; 0, se first */
 	.temperature_support = 1,	/* 1, support; 0,not support */
-	.sensor_mode_num = 3,	/* support sensor mode num */
-	.frame_time_delay_frame = 3,
+	.sensor_mode_num = 6,	/* support sensor mode num */
+	.frame_time_delay_frame = 2,
 	.cap_delay_frame = 1,	/* enter capture delay frame num */
 	.pre_delay_frame = 1,	/* enter preview delay frame num */
+	.custom1_delay_frame = 2,	/* enter custom1 delay frame num */
+	.hs_video_delay_frame = 2,
+	.slim_video_delay_frame = 2,
 	.video_delay_frame = 1,	/* enter video delay frame num */
 
 	.isp_driving_current = ISP_DRIVING_4MA,	/* mclk driving current */
@@ -243,6 +281,9 @@
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* Preview */
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* capture */
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* normal video */
+	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464},
+	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464},
+	{3280, 2464, 0,   0,   3280, 2464, 1640, 1232, 0, 0, 1640, 1232,  0,  0, 1640, 1232},	/* custom1 */
 };
 
 #ifdef IMX355_PDAF_SUPPORT
@@ -1944,10 +1985,8 @@
 
 	write_shutter(shutter);
 } /* set_shutter */
-
 static void set_shutter_frame_length(
-			kal_uint16 shutter, kal_uint16 frame_length,
-			kal_bool auto_extend_en)
+			kal_uint16 shutter, kal_uint16 frame_length)
 {
 	unsigned long flags;
 	kal_uint16 realtime_fps = 0;
@@ -2012,10 +2051,7 @@
 
 	/* Update Shutter */
 	write_cmos_sensor(0x0104, 0x01);
-	if (auto_extend_en)
-		write_cmos_sensor(0x0350, 0x01); /* Enable auto extend */
-	else
-		write_cmos_sensor(0x0350, 0x00); /* Disable auto extend */
+	write_cmos_sensor(0x0350, 0x00); /* Disable auto extend */
 	write_cmos_sensor(0x0202, (shutter >> 8) & 0xFF);
 	write_cmos_sensor(0x0203, shutter & 0xFF);
 	write_cmos_sensor(0x0104, 0x00);
@@ -2027,6 +2063,7 @@
 		dummy_line, read_cmos_sensor(0x0350));
 }			/* set_shutter_frame_length */
 
+
 static kal_uint16 gain2reg(const kal_uint16 gain)
 {
 	kal_uint16 iI;
@@ -2430,6 +2467,193 @@
 	/* zvhdr_setting(); */
 }				/*    preview_setting  */
 
+kal_uint16 addr_data_pair_hs_video_imx355aac[] = {
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x0E,
+	0x0343, 0x58,
+	0x0340, 0x09,
+	0x0341, 0xFC,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x00,
+	0x0901, 0x11,
+	0x0902, 0x00,
+	0x034C, 0x0C,
+	0x034D, 0xD0,
+	0x034E, 0x09,
+	0x034F, 0xA0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x03,
+	0x030E, 0x00,
+	0x030F, 0x58,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x0B,
+	0x0821, 0x00,
+	0x3088, 0x04,
+	0x6813, 0x02,
+	0x6835, 0x07,
+	0x6836, 0x00,
+	0x6837, 0x04,
+	0x684D, 0x07,
+	0x684E, 0x00,
+	0x684F, 0x04,
+	0x0202, 0x09,
+	0x0203, 0xF2,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void hs_video_setting(void)
+{
+	imx355aac_table_write_cmos_sensor(addr_data_pair_hs_video_imx355aac,
+	sizeof(addr_data_pair_hs_video_imx355aac) / sizeof(kal_uint16));
+	/* zvhdr_setting(); */
+}				/*    preview_setting  */
+
+kal_uint16 addr_data_pair_slim_video_imx355aac[] = {
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x0E,
+	0x0343, 0x58,
+	0x0340, 0x09,
+	0x0341, 0xFC,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x00,
+	0x0901, 0x11,
+	0x0902, 0x00,
+	0x034C, 0x0C,
+	0x034D, 0xD0,
+	0x034E, 0x09,
+	0x034F, 0xA0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x03,
+	0x030E, 0x00,
+	0x030F, 0x58,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x0B,
+	0x0821, 0x00,
+	0x3088, 0x04,
+	0x6813, 0x02,
+	0x6835, 0x07,
+	0x6836, 0x00,
+	0x6837, 0x04,
+	0x684D, 0x07,
+	0x684E, 0x00,
+	0x684F, 0x04,
+	0x0202, 0x09,
+	0x0203, 0xF2,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void slim_video_setting(void)
+{
+	imx355aac_table_write_cmos_sensor(addr_data_pair_slim_video_imx355aac,
+	sizeof(addr_data_pair_slim_video_imx355aac) / sizeof(kal_uint16));
+	/* zvhdr_setting(); */
+}				/*    slim_video_setting  */
+
+kal_uint16 addr_data_pair_custom1_imx355aac[] = {
+	0x0100, 0x00,
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x07,
+	0x0343, 0x2C,
+	0x0340, 0x0E,
+	0x0341, 0x4C,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x01,
+	0x0901, 0x22,
+	0x0902, 0x00,
+	0x034C, 0x06,
+	0x034D, 0x68,
+	0x034E, 0x04,
+	0x034F, 0xD0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x04,
+	0x030E, 0x00,
+	0x030F, 0x54,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x07,
+	0x0821, 0xE0,
+	0x3088, 0x04,
+	0x6813, 0x01,
+	0x6835, 0x00,
+	0x6836, 0x00,
+	0x6837, 0x02,
+	0x684D, 0x00,
+	0x684E, 0x00,
+	0x684F, 0x02,
+	0x0202, 0x0E,
+	0x0203, 0x42,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void custom1_setting(void)
+{
+	imx355aac_table_write_cmos_sensor(addr_data_pair_custom1_imx355aac,
+	sizeof(addr_data_pair_custom1_imx355aac) / sizeof(kal_uint16));
+	/* zvhdr_setting(); */
+}				/*    custom1_setting  */
+
 kal_uint16 addr_data_pair_capture_imx355aac[] = {
 	0x0112, 0x0A,
 	0x0113, 0x0A,
@@ -2493,7 +2717,6 @@
 		write_cmos_sensor(0x0100, 0X01);
 	else
 		write_cmos_sensor(0x0100, 0x00);
-
 	return ERROR_NONE;
 }
 
@@ -2938,6 +3161,75 @@
 	return ERROR_NONE;
 }				/*    preview   */
 
+static kal_uint32 hs_video(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_HIGH_SPEED_VIDEO;
+	imgsensor.pclk = imgsensor_info.hs_video.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.hs_video.linelength;
+	imgsensor.frame_length = imgsensor_info.hs_video.framelength;
+	imgsensor.min_frame_length = imgsensor_info.hs_video.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("hs_video_lock");
+
+	hs_video_setting();
+
+	KD_SENSOR_PROFILE("hs_video_setting");
+	return ERROR_NONE;
+}				/*    preview   */
+
+static kal_uint32 slim_video(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_SLIM_VIDEO;
+	imgsensor.pclk = imgsensor_info.slim_video.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.slim_video.linelength;
+	imgsensor.frame_length = imgsensor_info.slim_video.framelength;
+	imgsensor.min_frame_length = imgsensor_info.slim_video.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("slim_video_lock");
+
+	slim_video_setting();
+
+	KD_SENSOR_PROFILE("slim_video_setting");
+	return ERROR_NONE;
+}				/*    preview   */
+
+static kal_uint32 custom1(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_CUSTOM1;
+	imgsensor.pclk = imgsensor_info.custom1.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.custom1.linelength;
+	imgsensor.frame_length = imgsensor_info.custom1.framelength;
+	imgsensor.min_frame_length = imgsensor_info.custom1.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("custom1_lock");
+
+	custom1_setting();
+
+	KD_SENSOR_PROFILE("custom1_setting");
+	return ERROR_NONE;
+}				/*    custom1  */
+
 /*************************************************************************
  * FUNCTION
  *    capture
@@ -3045,6 +3337,21 @@
 	sensor_resolution->SensorPreviewHeight =
 		imgsensor_info.pre.grabwindow_height;
 
+	sensor_resolution->SensorHighSpeedVideoWidth =
+		imgsensor_info.hs_video.grabwindow_width;
+	sensor_resolution->SensorHighSpeedVideoHeight =
+		imgsensor_info.hs_video.grabwindow_height;
+
+	sensor_resolution->SensorSlimVideoWidth =
+		imgsensor_info.slim_video.grabwindow_width;
+	sensor_resolution->SensorSlimVideoHeight =
+		imgsensor_info.slim_video.grabwindow_height;
+
+	sensor_resolution->SensorCustom1Width =
+		imgsensor_info.custom1.grabwindow_width;
+	sensor_resolution->SensorCustom1Height =
+		imgsensor_info.custom1.grabwindow_height;
+
 	sensor_resolution->SensorVideoWidth =
 		imgsensor_info.normal_video.grabwindow_width;
 	sensor_resolution->SensorVideoHeight =
@@ -3084,6 +3391,9 @@
 
 	sensor_info->CaptureDelayFrame = imgsensor_info.cap_delay_frame;
 	sensor_info->PreviewDelayFrame = imgsensor_info.pre_delay_frame;
+	sensor_info->HighSpeedVideoDelayFrame = imgsensor_info.hs_video_delay_frame;
+	sensor_info->SlimVideoDelayFrame = imgsensor_info.slim_video_delay_frame;
+	sensor_info->Custom1DelayFrame = imgsensor_info.custom1_delay_frame;
 	sensor_info->VideoDelayFrame = imgsensor_info.video_delay_frame;
 #if SUPPORT_HPS
 	sensor_info->HighSpeedVideoDelayFrame =
@@ -3149,6 +3459,26 @@
 		    imgsensor_info.pre.mipi_data_lp2hs_settle_dc;
 
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		sensor_info->SensorGrabStartX = imgsensor_info.hs_video.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.hs_video.starty;
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+			imgsensor_info.hs_video.mipi_data_lp2hs_settle_dc;
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		sensor_info->SensorGrabStartX = imgsensor_info.slim_video.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.slim_video.starty;
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+			imgsensor_info.slim_video.mipi_data_lp2hs_settle_dc;
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		sensor_info->SensorGrabStartX = imgsensor_info.custom1.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.custom1.starty;
+
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+		    imgsensor_info.custom1.mipi_data_lp2hs_settle_dc;
+
+		break;
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		sensor_info->SensorGrabStartX = imgsensor_info.cap.startx;
 		sensor_info->SensorGrabStartY = imgsensor_info.cap.starty;
@@ -3206,6 +3536,15 @@
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		capture(image_window, sensor_config_data);
 		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		custom1(image_window, sensor_config_data);
+		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		hs_video(image_window, sensor_config_data);
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		slim_video(image_window, sensor_config_data);
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		normal_video(image_window, sensor_config_data);
 		break;
@@ -3271,8 +3610,46 @@
 			imgsensor_info.pre.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
+		if(imgsensor.frame_length>imgsensor.shutter)
 		set_dummy();
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		frame_length = imgsensor_info.hs_video.pclk / framerate * 10 / imgsensor_info.hs_video.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line = (frame_length > imgsensor_info.hs_video.framelength) ?
+			(frame_length - imgsensor_info.hs_video.framelength) : 0;
+		imgsensor.frame_length = imgsensor_info.hs_video.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		frame_length = imgsensor_info.slim_video.pclk / framerate * 10 / imgsensor_info.slim_video.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line = (frame_length > imgsensor_info.slim_video.framelength) ?
+			(frame_length - imgsensor_info.slim_video.framelength) : 0;
+		imgsensor.frame_length = imgsensor_info.slim_video.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		frame_length =
+			imgsensor_info.custom1.pclk /
+		    framerate * 10 / imgsensor_info.custom1.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line =
+			(frame_length > imgsensor_info.custom1.framelength)
+			? (frame_length - imgsensor_info.custom1.framelength) : 0;
+		imgsensor.frame_length =
+			imgsensor_info.custom1.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if(imgsensor.frame_length>imgsensor.shutter)
+			set_dummy();
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		if (framerate == 0)
 			return ERROR_NONE;
@@ -3290,7 +3667,8 @@
 
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		if (imgsensor.current_fps != imgsensor_info.cap.max_framerate)
@@ -3308,7 +3686,8 @@
 			imgsensor_info.cap.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 #if SUPPORT_HPS
 	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
@@ -3322,7 +3701,8 @@
 			imgsensor_info.hs_video.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 #endif
 	default:		/* coding with  preview scenario by default */
@@ -3336,7 +3716,8 @@
 			imgsensor_info.pre.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		LOG_INF("error scenario_id = %d, we use preview scenario\n",
 			scenario_id);
 		break;
@@ -3353,6 +3734,15 @@
 	case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
 		*framerate = imgsensor_info.pre.max_framerate;
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		*framerate = imgsensor_info.hs_video.max_framerate;
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		*framerate = imgsensor_info.slim_video.max_framerate;
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		*framerate = imgsensor_info.custom1.max_framerate;
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		*framerate = imgsensor_info.normal_video.max_framerate;
 		break;
@@ -3480,6 +3870,18 @@
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.cap.pclk;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.hs_video.pclk;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.slim_video.pclk;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.custom1.pclk;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.normal_video.pclk;
@@ -3506,6 +3908,27 @@
 			imgsensor_info.cap.grabwindow_width;
 
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.hs_video.pclk /
+			(imgsensor_info.hs_video.linelength - 80))*
+			imgsensor_info.hs_video.grabwindow_width;
+
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.slim_video.pclk /
+			(imgsensor_info.slim_video.linelength - 80))*
+			imgsensor_info.slim_video.grabwindow_width;
+
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.custom1.pclk /
+			(imgsensor_info.custom1.linelength - 80))*
+			imgsensor_info.custom1.grabwindow_width;
+
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
 			(imgsensor_info.normal_video.pclk /
@@ -3539,6 +3962,21 @@
 			= (imgsensor_info.cap.framelength << 16)
 				+ imgsensor_info.cap.linelength;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.hs_video.framelength << 16)
+				+ imgsensor_info.hs_video.linelength;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.slim_video.framelength << 16)
+				+ imgsensor_info.slim_video.linelength;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.custom1.framelength << 16)
+				+ imgsensor_info.custom1.linelength;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 			= (imgsensor_info.normal_video.framelength << 16)
@@ -3656,6 +4094,15 @@
 				(void *)&imgsensor_winsize_info[1],
 				sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[3], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[4], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[5], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+                break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			memcpy((void *)wininfo,
 				(void *)&imgsensor_winsize_info[2],
@@ -3736,6 +4183,15 @@
 		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
 			break;
@@ -3810,8 +4266,7 @@
 
 	case SENSOR_FEATURE_SET_SHUTTER_FRAME_TIME:
 		set_shutter_frame_length(
-			(UINT16)(*feature_data), (UINT16)(*(feature_data + 1)),
-			(kal_bool)(*(feature_data + 2)));
+			(UINT16)(*feature_data), (UINT16)(*(feature_data + 1)));
 		break;
 	case SENSOR_FEATURE_GET_FRAME_CTRL_INFO_BY_SCENARIO:
 		/*
@@ -3842,6 +4297,18 @@
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.cap.mipi_pixel_rate;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.hs_video.mipi_pixel_rate;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.slim_video.mipi_pixel_rate;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.custom1.mipi_pixel_rate;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.normal_video.mipi_pixel_rate;
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.h micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.h	2023-09-30 14:32:16.804000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_aac_ultra_mipi_raw/imx355_aac_ultra_mipiraw_Sensor.h	2023-09-30 10:01:17.828000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -36,6 +35,9 @@
 	IMGSENSOR_MODE_PREVIEW,
 	IMGSENSOR_MODE_CAPTURE,
 	IMGSENSOR_MODE_VIDEO,
+	IMGSENSOR_MODE_HIGH_SPEED_VIDEO,
+	IMGSENSOR_MODE_SLIM_VIDEO,
+	IMGSENSOR_MODE_CUSTOM1,
 };
 
 struct imgsensor_mode_struct {
@@ -107,6 +109,8 @@
 	struct imgsensor_mode_struct normal_video;
 	/* high speed video scenario relative information */
 	struct imgsensor_mode_struct hs_video;
+	struct imgsensor_mode_struct slim_video;
+	struct imgsensor_mode_struct custom1;
 
 	kal_uint8 ae_shut_delay_frame;	/* shutter delay frame for AE cycle */
 
@@ -121,6 +125,9 @@
 	kal_uint8 frame_time_delay_frame;
 	kal_uint8 cap_delay_frame;	/* enter capture delay frame num */
 	kal_uint8 pre_delay_frame;	/* enter preview delay frame num */
+	kal_uint8  custom1_delay_frame;
+	kal_uint8  hs_video_delay_frame;
+	kal_uint8  slim_video_delay_frame;
 	kal_uint8 video_delay_frame;	/* enter video delay frame num */
 
 	/* enter high speed video  delay frame num */
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.c	2023-09-30 14:32:16.804000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.c	2023-09-30 10:01:17.832000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -168,6 +167,42 @@
 		.mipi_pixel_rate = 281600000,
 		.max_framerate = 300,
 	},
+	.hs_video = {
+		.pclk = 281600000,
+		.linelength = 3672,
+		.framelength = 2556,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 3280,
+		.grabwindow_height = 2464,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 281600000,
+		.max_framerate = 300,
+	},
+	.slim_video = {
+		.pclk = 281600000,
+		.linelength = 3672,
+		.framelength = 2556,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 3280,
+		.grabwindow_height = 2464,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 281600000,
+		.max_framerate = 300,
+	},
+	.custom1 = {		/*data rate 1099.20 Mbps/lane */
+		.pclk = 201592800,
+		.linelength = 1836,
+		.framelength = 3660,
+		.startx = 0,
+		.starty = 0,
+		.grabwindow_width = 1640,
+		.grabwindow_height = 1232,
+		.mipi_data_lp2hs_settle_dc = 85,	/* unit , ns */
+		.mipi_pixel_rate = 202226949,
+		.max_framerate = 300,
+	},
 
 	.margin = 10,		/* sensor framelength & shutter margin */
 	.min_shutter = 20,	/* min shutter */
@@ -192,10 +227,13 @@
 	.ihdr_support = 0,	/* 1, support; 0,not support */
 	.ihdr_le_firstline = 0,	/* 1,le first ; 0, se first */
 	.temperature_support = 1,	/* 1, support; 0,not support */
-	.sensor_mode_num = 3,	/* support sensor mode num */
-	.frame_time_delay_frame = 3,
+	.sensor_mode_num = 6,	/* support sensor mode num */
+	.frame_time_delay_frame = 2,
 	.cap_delay_frame = 1,	/* enter capture delay frame num */
 	.pre_delay_frame = 1,	/* enter preview delay frame num */
+	.custom1_delay_frame = 2,	/* enter custom1 delay frame num */
+	.hs_video_delay_frame = 2,
+	.slim_video_delay_frame = 2,
 	.video_delay_frame = 1,	/* enter video delay frame num */
 
 	.isp_driving_current = ISP_DRIVING_4MA,	/* mclk driving current */
@@ -243,6 +281,9 @@
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* Preview */
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* capture */
 	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464}, /* normal video */
+	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464},
+	{3280, 2464, 0,   0,   3280, 2464, 3280, 2464, 0, 0, 3280, 2464,  0,  0, 3280, 2464},
+	{3280, 2464, 0,   0,   3280, 2464, 1640, 1232, 0, 0, 1640, 1232,  0,  0, 1640, 1232}, /* custom1 */
 };
 
 #ifdef IMX355_PDAF_SUPPORT
@@ -1627,7 +1668,7 @@
 	char pu_send_cmd[2] = { (char)(addr >> 8), (char)(addr & 0xFF) };
 
 	iReadRegI2C(pu_send_cmd, 2, (u8 *) &get_byte, 1,
-		    imgsensor.i2c_write_id);
+			imgsensor.i2c_write_id);
 
 	return get_byte;
 }
@@ -1946,8 +1987,7 @@
 } /* set_shutter */
 
 static void set_shutter_frame_length(
-			kal_uint16 shutter, kal_uint16 frame_length,
-			kal_bool auto_extend_en)
+			kal_uint16 shutter, kal_uint16 frame_length)
 {
 	unsigned long flags;
 	kal_uint16 realtime_fps = 0;
@@ -2012,10 +2052,7 @@
 
 	/* Update Shutter */
 	write_cmos_sensor(0x0104, 0x01);
-	if (auto_extend_en)
-		write_cmos_sensor(0x0350, 0x01); /* Enable auto extend */
-	else
-		write_cmos_sensor(0x0350, 0x00); /* Disable auto extend */
+	write_cmos_sensor(0x0350, 0x00); /* Disable auto extend */
 	write_cmos_sensor(0x0202, (shutter >> 8) & 0xFF);
 	write_cmos_sensor(0x0203, shutter & 0xFF);
 	write_cmos_sensor(0x0104, 0x00);
@@ -2429,6 +2466,192 @@
 	/* zvhdr_setting(); */
 }				/*    preview_setting  */
 
+kal_uint16 addr_data_pair_hs_video_imx355sunny[] = {
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x0E,
+	0x0343, 0x58,
+	0x0340, 0x09,
+	0x0341, 0xFC,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x00,
+	0x0901, 0x11,
+	0x0902, 0x00,
+	0x034C, 0x0C,
+	0x034D, 0xD0,
+	0x034E, 0x09,
+	0x034F, 0xA0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x03,
+	0x030E, 0x00,
+	0x030F, 0x58,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x0B,
+	0x0821, 0x00,
+	0x3088, 0x04,
+	0x6813, 0x02,
+	0x6835, 0x07,
+	0x6836, 0x00,
+	0x6837, 0x04,
+	0x684D, 0x07,
+	0x684E, 0x00,
+	0x684F, 0x04,
+	0x0202, 0x09,
+	0x0203, 0xF2,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void hs_video_setting(void)
+{
+	imx355sunny_table_write_cmos_sensor(addr_data_pair_hs_video_imx355sunny,
+	sizeof(addr_data_pair_hs_video_imx355sunny) / sizeof(kal_uint16));
+	/* zvhdr_setting(); */
+}				/*    preview_setting  */
+
+kal_uint16 addr_data_pair_slim_video_imx355sunny[] = {
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x0E,
+	0x0343, 0x58,
+	0x0340, 0x09,
+	0x0341, 0xFC,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x00,
+	0x0901, 0x11,
+	0x0902, 0x00,
+	0x034C, 0x0C,
+	0x034D, 0xD0,
+	0x034E, 0x09,
+	0x034F, 0xA0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x03,
+	0x030E, 0x00,
+	0x030F, 0x58,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x0B,
+	0x0821, 0x00,
+	0x3088, 0x04,
+	0x6813, 0x02,
+	0x6835, 0x07,
+	0x6836, 0x00,
+	0x6837, 0x04,
+	0x684D, 0x07,
+	0x684E, 0x00,
+	0x684F, 0x04,
+	0x0202, 0x09,
+	0x0203, 0xF2,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void slim_video_setting(void)
+{
+	imx355sunny_table_write_cmos_sensor(addr_data_pair_slim_video_imx355sunny,
+	sizeof(addr_data_pair_slim_video_imx355sunny) / sizeof(kal_uint16));
+	/* zvhdr_setting(); */
+}				/*    slim_video_setting  */
+
+kal_uint16 addr_data_pair_custom1_imx355sunny[] = {
+	0x0100, 0x00,
+	0x0112, 0x0A,
+	0x0113, 0x0A,
+	0x0114, 0x03,
+	0x0342, 0x07,
+	0x0343, 0x2C,
+	0x0340, 0x0E,
+	0x0341, 0x4C,
+	0x0344, 0x00,
+	0x0345, 0x00,
+	0x0346, 0x00,
+	0x0347, 0x00,
+	0x0348, 0x0C,
+	0x0349, 0xCF,
+	0x034A, 0x09,
+	0x034B, 0x9F,
+	0x0220, 0x00,
+	0x0222, 0x01,
+	0x0900, 0x01,
+	0x0901, 0x22,
+	0x0902, 0x00,
+	0x034C, 0x06,
+	0x034D, 0x68,
+	0x034E, 0x04,
+	0x034F, 0xD0,
+	0x0301, 0x05,
+	0x0303, 0x01,
+	0x0305, 0x02,
+	0x0306, 0x00,
+	0x0307, 0x78,
+	0x030B, 0x01,
+	0x030D, 0x04,
+	0x030E, 0x00,
+	0x030F, 0x54,
+	0x0310, 0x00,
+	0x0700, 0x00,
+	0x0701, 0x10,
+	0x0820, 0x07,
+	0x0821, 0xE0,
+	0x3088, 0x04,
+	0x6813, 0x01,
+	0x6835, 0x00,
+	0x6836, 0x00,
+	0x6837, 0x02,
+	0x684D, 0x00,
+	0x684E, 0x00,
+	0x684F, 0x02,
+	0x0202, 0x0E,
+	0x0203, 0x42,
+	0x0204, 0x00,
+	0x0205, 0x00,
+	0x020E, 0x01,
+	0x020F, 0x00,
+};
+
+static void custom1_setting(void)
+{
+	imx355sunny_table_write_cmos_sensor(addr_data_pair_custom1_imx355sunny,
+	sizeof(addr_data_pair_custom1_imx355sunny) / sizeof(kal_uint16));
+}				/*    custom1_setting  */
+
 kal_uint16 addr_data_pair_capture_imx355sunny[] = {
 	0x0112, 0x0A,
 	0x0113, 0x0A,
@@ -2492,7 +2715,6 @@
 		write_cmos_sensor(0x0100, 0X01);
 	else
 		write_cmos_sensor(0x0100, 0x00);
-
 	return ERROR_NONE;
 }
 
@@ -2772,7 +2994,7 @@
 			/* return_sensor_id(); */
 			if (*sensor_id == imgsensor_info.sensor_id) {
 				#ifdef IMX355_PDAF_SUPPORT
-				imx355aac_read_SPC(imx355aac_SPC_data);
+				imx355sunny_read_SPC(imx355sunny_SPC_data);
 				#endif
 				LOG_INF("i2c write id: 0x%x, sensor id: 0x%x\n",
 					imgsensor.i2c_write_id, *sensor_id);
@@ -2937,6 +3159,75 @@
 	return ERROR_NONE;
 }				/*    preview   */
 
+static kal_uint32 hs_video(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_HIGH_SPEED_VIDEO;
+	imgsensor.pclk = imgsensor_info.hs_video.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.hs_video.linelength;
+	imgsensor.frame_length = imgsensor_info.hs_video.framelength;
+	imgsensor.min_frame_length = imgsensor_info.hs_video.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("hs_video_lock");
+
+	hs_video_setting();
+
+	KD_SENSOR_PROFILE("hs_video_setting");
+	return ERROR_NONE;
+}				/*    preview   */
+
+static kal_uint32 slim_video(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_SLIM_VIDEO;
+	imgsensor.pclk = imgsensor_info.slim_video.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.slim_video.linelength;
+	imgsensor.frame_length = imgsensor_info.slim_video.framelength;
+	imgsensor.min_frame_length = imgsensor_info.slim_video.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("slim_video_lock");
+
+	slim_video_setting();
+
+	KD_SENSOR_PROFILE("slim_video_setting");
+	return ERROR_NONE;
+}				/*    preview   */
+
+static kal_uint32 custom1(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
+			  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
+{
+	KD_SENSOR_PROFILE_INIT();
+
+	spin_lock(&imgsensor_drv_lock);
+	imgsensor.sensor_mode = IMGSENSOR_MODE_CUSTOM1;
+	imgsensor.pclk = imgsensor_info.custom1.pclk;
+	/* imgsensor.video_mode = KAL_FALSE; */
+	imgsensor.line_length = imgsensor_info.custom1.linelength;
+	imgsensor.frame_length = imgsensor_info.custom1.framelength;
+	imgsensor.min_frame_length = imgsensor_info.custom1.framelength;
+	imgsensor.autoflicker_en = KAL_FALSE;
+	spin_unlock(&imgsensor_drv_lock);
+
+	KD_SENSOR_PROFILE("custom1_lock");
+
+	custom1_setting();
+
+	KD_SENSOR_PROFILE("custom1_setting");
+	return ERROR_NONE;
+}				/*    custom1  */
+
 /*************************************************************************
  * FUNCTION
  *    capture
@@ -3044,6 +3335,21 @@
 	sensor_resolution->SensorPreviewHeight =
 		imgsensor_info.pre.grabwindow_height;
 
+	sensor_resolution->SensorHighSpeedVideoWidth =
+		imgsensor_info.hs_video.grabwindow_width;
+	sensor_resolution->SensorHighSpeedVideoHeight =
+		imgsensor_info.hs_video.grabwindow_height;
+
+	sensor_resolution->SensorSlimVideoWidth =
+		imgsensor_info.slim_video.grabwindow_width;
+	sensor_resolution->SensorSlimVideoHeight =
+		imgsensor_info.slim_video.grabwindow_height;
+
+	sensor_resolution->SensorCustom1Width =
+		imgsensor_info.custom1.grabwindow_width;
+	sensor_resolution->SensorCustom1Height =
+		imgsensor_info.custom1.grabwindow_height;
+
 	sensor_resolution->SensorVideoWidth =
 		imgsensor_info.normal_video.grabwindow_width;
 	sensor_resolution->SensorVideoHeight =
@@ -3083,6 +3389,9 @@
 
 	sensor_info->CaptureDelayFrame = imgsensor_info.cap_delay_frame;
 	sensor_info->PreviewDelayFrame = imgsensor_info.pre_delay_frame;
+	sensor_info->HighSpeedVideoDelayFrame = imgsensor_info.hs_video_delay_frame;
+	sensor_info->SlimVideoDelayFrame = imgsensor_info.slim_video_delay_frame;
+	sensor_info->Custom1DelayFrame = imgsensor_info.custom1_delay_frame;
 	sensor_info->VideoDelayFrame = imgsensor_info.video_delay_frame;
 #if SUPPORT_HPS
 	sensor_info->HighSpeedVideoDelayFrame =
@@ -3148,6 +3457,26 @@
 		    imgsensor_info.pre.mipi_data_lp2hs_settle_dc;
 
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		sensor_info->SensorGrabStartX = imgsensor_info.hs_video.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.hs_video.starty;
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+			imgsensor_info.hs_video.mipi_data_lp2hs_settle_dc;
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		sensor_info->SensorGrabStartX = imgsensor_info.slim_video.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.slim_video.starty;
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+			imgsensor_info.slim_video.mipi_data_lp2hs_settle_dc;
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		sensor_info->SensorGrabStartX = imgsensor_info.custom1.startx;
+		sensor_info->SensorGrabStartY = imgsensor_info.custom1.starty;
+
+		sensor_info->MIPIDataLowPwr2HighSpeedSettleDelayCount =
+		    imgsensor_info.custom1.mipi_data_lp2hs_settle_dc;
+
+		break;
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		sensor_info->SensorGrabStartX = imgsensor_info.cap.startx;
 		sensor_info->SensorGrabStartY = imgsensor_info.cap.starty;
@@ -3205,6 +3534,15 @@
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		capture(image_window, sensor_config_data);
 		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		custom1(image_window, sensor_config_data);
+		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		hs_video(image_window, sensor_config_data);
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		slim_video(image_window, sensor_config_data);
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		normal_video(image_window, sensor_config_data);
 		break;
@@ -3270,8 +3608,46 @@
 			imgsensor_info.pre.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
+		if(imgsensor.frame_length>imgsensor.shutter)
 		set_dummy();
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		frame_length = imgsensor_info.hs_video.pclk / framerate * 10 / imgsensor_info.hs_video.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line = (frame_length > imgsensor_info.hs_video.framelength) ?
+			(frame_length - imgsensor_info.hs_video.framelength) : 0;
+		imgsensor.frame_length = imgsensor_info.hs_video.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		frame_length = imgsensor_info.slim_video.pclk / framerate * 10 / imgsensor_info.slim_video.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line = (frame_length > imgsensor_info.slim_video.framelength) ?
+			(frame_length - imgsensor_info.slim_video.framelength) : 0;
+		imgsensor.frame_length = imgsensor_info.slim_video.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		frame_length =
+			imgsensor_info.custom1.pclk /
+		    framerate * 10 / imgsensor_info.custom1.linelength;
+		spin_lock(&imgsensor_drv_lock);
+		imgsensor.dummy_line =
+			(frame_length > imgsensor_info.custom1.framelength)
+			? (frame_length - imgsensor_info.custom1.framelength) : 0;
+		imgsensor.frame_length =
+			imgsensor_info.custom1.framelength + imgsensor.dummy_line;
+		imgsensor.min_frame_length = imgsensor.frame_length;
+		spin_unlock(&imgsensor_drv_lock);
+		if(imgsensor.frame_length>imgsensor.shutter)
+			set_dummy();
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		if (framerate == 0)
 			return ERROR_NONE;
@@ -3289,7 +3665,8 @@
 
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 	case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 		if (imgsensor.current_fps != imgsensor_info.cap.max_framerate)
@@ -3307,7 +3684,8 @@
 		    imgsensor_info.cap.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 #if SUPPORT_HPS
 	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
@@ -3321,7 +3699,8 @@
 		    imgsensor_info.hs_video.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		break;
 #endif
 	default:		/* coding with  preview scenario by default */
@@ -3335,7 +3714,8 @@
 			imgsensor_info.pre.framelength + imgsensor.dummy_line;
 		imgsensor.min_frame_length = imgsensor.frame_length;
 		spin_unlock(&imgsensor_drv_lock);
-		set_dummy();
+		if (imgsensor.frame_length > imgsensor.shutter)
+			set_dummy();
 		LOG_INF("error scenario_id = %d, we use preview scenario\n",
 			scenario_id);
 		break;
@@ -3352,6 +3732,15 @@
 	case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
 		*framerate = imgsensor_info.pre.max_framerate;
 		break;
+	case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+		*framerate = imgsensor_info.hs_video.max_framerate;
+		break;
+	case MSDK_SCENARIO_ID_SLIM_VIDEO:
+		*framerate = imgsensor_info.slim_video.max_framerate;
+		break;
+	case MSDK_SCENARIO_ID_CUSTOM1:
+		*framerate = imgsensor_info.custom1.max_framerate;
+		break;
 	case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 		*framerate = imgsensor_info.normal_video.max_framerate;
 		break;
@@ -3479,6 +3868,18 @@
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.cap.pclk;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.hs_video.pclk;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.slim_video.pclk;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.custom1.pclk;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.normal_video.pclk;
@@ -3505,6 +3906,27 @@
 			imgsensor_info.cap.grabwindow_width;
 
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.hs_video.pclk /
+			(imgsensor_info.hs_video.linelength - 80))*
+			imgsensor_info.hs_video.grabwindow_width;
+
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.slim_video.pclk /
+			(imgsensor_info.slim_video.linelength - 80))*
+			imgsensor_info.slim_video.grabwindow_width;
+
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
+			(imgsensor_info.custom1.pclk /
+			(imgsensor_info.custom1.linelength - 80))*
+			imgsensor_info.custom1.grabwindow_width;
+
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1)) =
 			(imgsensor_info.normal_video.pclk /
@@ -3538,6 +3960,21 @@
 			= (imgsensor_info.cap.framelength << 16)
 				+ imgsensor_info.cap.linelength;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.hs_video.framelength << 16)
+				+ imgsensor_info.hs_video.linelength;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.slim_video.framelength << 16)
+				+ imgsensor_info.slim_video.linelength;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+			= (imgsensor_info.custom1.framelength << 16)
+				+ imgsensor_info.custom1.linelength;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 			= (imgsensor_info.normal_video.framelength << 16)
@@ -3655,6 +4092,15 @@
 				(void *)&imgsensor_winsize_info[1],
 			    sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[3], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[4], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			memcpy((void *)wininfo, (void *)&imgsensor_winsize_info[5], sizeof(struct SENSOR_WINSIZE_INFO_STRUCT));
+                break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			memcpy((void *)wininfo,
 				(void *)&imgsensor_winsize_info[2],
@@ -3735,6 +4181,15 @@
 		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
 			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *) (uintptr_t) (*(feature_data + 1)) = 0x02;
 			break;
@@ -3809,8 +4264,7 @@
 		
 	case SENSOR_FEATURE_SET_SHUTTER_FRAME_TIME:
 		set_shutter_frame_length(
-		    (UINT16)(*feature_data), (UINT16)(*(feature_data + 1)),
-		    (kal_bool)(*(feature_data + 2)));
+		    (UINT16)(*feature_data), (UINT16)(*(feature_data + 1)));
 		break;
 	case SENSOR_FEATURE_GET_FRAME_CTRL_INFO_BY_SCENARIO:
 		/*
@@ -3841,6 +4295,18 @@
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.cap.mipi_pixel_rate;
 			break;
+		case MSDK_SCENARIO_ID_HIGH_SPEED_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.hs_video.mipi_pixel_rate;
+			break;
+		case MSDK_SCENARIO_ID_SLIM_VIDEO:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.slim_video.mipi_pixel_rate;
+			break;
+		case MSDK_SCENARIO_ID_CUSTOM1:
+			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
+				= imgsensor_info.custom1.mipi_pixel_rate;
+			break;
 		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
 			*(MUINT32 *)(uintptr_t)(*(feature_data + 1))
 				= imgsensor_info.normal_video.mipi_pixel_rate;
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.h micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.h	2023-09-30 14:32:16.804000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/imx355_sunny_ultra_mipi_raw/imx355_sunny_ultra_mipiraw_Sensor.h	2023-09-30 10:01:17.832000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -36,6 +35,9 @@
 	IMGSENSOR_MODE_PREVIEW,
 	IMGSENSOR_MODE_CAPTURE,
 	IMGSENSOR_MODE_VIDEO,
+	IMGSENSOR_MODE_HIGH_SPEED_VIDEO,
+	IMGSENSOR_MODE_SLIM_VIDEO,
+	IMGSENSOR_MODE_CUSTOM1,
 };
 
 struct imgsensor_mode_struct {
@@ -107,6 +109,8 @@
 	struct imgsensor_mode_struct normal_video;
 	/* high speed video scenario relative information */
 	struct imgsensor_mode_struct hs_video;
+	struct imgsensor_mode_struct slim_video;
+	struct imgsensor_mode_struct custom1;
 
 	kal_uint8 ae_shut_delay_frame;	/* shutter delay frame for AE cycle */
 
@@ -121,6 +125,9 @@
 	kal_uint8 frame_time_delay_frame;
 	kal_uint8 cap_delay_frame;	/* enter capture delay frame num */
 	kal_uint8 pre_delay_frame;	/* enter preview delay frame num */
+	kal_uint8  custom1_delay_frame;
+	kal_uint8  hs_video_delay_frame;
+	kal_uint8  slim_video_delay_frame;
 	kal_uint8 video_delay_frame;	/* enter video delay frame num */
 
 	/* enter high speed video  delay frame num */
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_ofilm_main_mipi_raw/ov50c40_ofilm_main_mipi_raw.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_ofilm_main_mipi_raw/ov50c40_ofilm_main_mipi_raw.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_ofilm_main_mipi_raw/ov50c40_ofilm_main_mipi_raw.c	2023-09-30 14:32:16.808000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_ofilm_main_mipi_raw/ov50c40_ofilm_main_mipi_raw.c	2023-09-30 10:01:17.840000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -136,14 +135,14 @@
 	.custom1 = {
 		.pclk = 100000000,
 		.linelength = 1050,
-		.framelength = 3174,
+		.framelength = 3175,
 		.startx = 0,
 		.starty = 0,
 		.grabwindow_width = 4096,
 		.grabwindow_height = 3072,
 		.mipi_data_lp2hs_settle_dc = 85,	//unit(ns), 16/23/65/85 recommanded
 		.mipi_pixel_rate = 512000000,
-		.max_framerate = 300,
+		.max_framerate = 299,
 		},
 
 	.margin = 0x16,
@@ -470,30 +469,30 @@
 		} else {
 			imgsensor.frame_length =
 			    (imgsensor.frame_length >> 1) << 1;
-			write_cmos_sensor(0x3208, 0x00);
+			// write_cmos_sensor(0x3208, 0x00);
 			write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 			write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 			write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
-			write_cmos_sensor(0x3208, 0x10);
-			write_cmos_sensor(0x3208, 0xa0);
+			// write_cmos_sensor(0x3208, 0x10);
+			// write_cmos_sensor(0x3208, 0xa0);
 		}
 	} else {
 	    imgsensor.frame_length = (imgsensor.frame_length >> 1) << 1;
-		write_cmos_sensor(0x3208, 0x00);
+		// write_cmos_sensor(0x3208, 0x00);
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
-		write_cmos_sensor(0x3208, 0x10);
-		write_cmos_sensor(0x3208, 0xa0);
+		// write_cmos_sensor(0x3208, 0x10);
+		// write_cmos_sensor(0x3208, 0xa0);
 	}
 
 	/*Warning : shutter must be even. Odd might happen Unexpected Results */
-	write_cmos_sensor(0x3208, 0x00);
+	// write_cmos_sensor(0x3208, 0x00);
 	write_cmos_sensor(0x3500, (shutter >> 16) & 0xFF);
 	write_cmos_sensor(0x3501, (shutter >> 8) & 0xFF);
 	write_cmos_sensor(0x3502, (shutter)  & 0xFF);
-	write_cmos_sensor(0x3208, 0x10);
-	write_cmos_sensor(0x3208, 0xa0);
+	// write_cmos_sensor(0x3208, 0x10);
+	// write_cmos_sensor(0x3208, 0xa0);
 	LOG_DBG("shutter =%d, framelength =%d, realtime_fps =%d\n",
 		shutter, imgsensor.frame_length, realtime_fps);
 }
@@ -567,18 +566,19 @@
 			realtime_fps = 146;
 	    set_max_framerate(realtime_fps, 0);
 		} else {
-		imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
+		//imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
 		}
 	} else {
-	imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
+	//imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
 	}
-
+        if(shutter == 3174)
+            shutter = shutter-1;
 	//write_cmos_sensor(0x3822, 0x14);
 	write_cmos_sensor(0x3500, (shutter >> 16) & 0xFF);   //need to verify
 	write_cmos_sensor(0x3501, (shutter >> 8) & 0xFF);
@@ -827,7 +827,7 @@
 	0x380c, 0x04,
 	0x380d, 0x1a,
 	0x380e, 0x0c,
-	0x380f, 0x66,
+	0x380f, 0x67,
 	0x3810, 0x00,
 	0x3811, 0x08,
 	0x3812, 0x00,
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_qtech_main_mipi_raw/ov50c40_qtech_main_mipi_raw.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_qtech_main_mipi_raw/ov50c40_qtech_main_mipi_raw.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_qtech_main_mipi_raw/ov50c40_qtech_main_mipi_raw.c	2023-09-30 14:32:16.808000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov50c40_qtech_main_mipi_raw/ov50c40_qtech_main_mipi_raw.c	2023-09-30 10:01:17.844000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -138,14 +137,14 @@
 	.custom1 = {
 		.pclk = 100000000,
 		.linelength = 1050,
-		.framelength = 3174,
+		.framelength = 3175,
 		.startx = 0,
 		.starty = 0,
 		.grabwindow_width = 4096,
 		.grabwindow_height = 3072,
 		.mipi_data_lp2hs_settle_dc = 85,	//unit(ns), 16/23/65/85 recommanded
 		.mipi_pixel_rate = 512000000,
-		.max_framerate = 300,
+		.max_framerate = 299,
 		},
 
 	.margin = 0x16,
@@ -472,30 +471,30 @@
 		} else {
 			imgsensor.frame_length =
 			    (imgsensor.frame_length >> 1) << 1;
-			write_cmos_sensor(0x3208, 0x00);
+			// write_cmos_sensor(0x3208, 0x00);
 			write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 			write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 			write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
-			write_cmos_sensor(0x3208, 0x10);
-			write_cmos_sensor(0x3208, 0xa0);
+			// write_cmos_sensor(0x3208, 0x10);
+			// write_cmos_sensor(0x3208, 0xa0);
 		}
 	} else {
 	    imgsensor.frame_length = (imgsensor.frame_length >> 1) << 1;
-		write_cmos_sensor(0x3208, 0x00);
+		// write_cmos_sensor(0x3208, 0x00);
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
-		write_cmos_sensor(0x3208, 0x10);
-		write_cmos_sensor(0x3208, 0xa0);
+		// write_cmos_sensor(0x3208, 0x10);
+		// write_cmos_sensor(0x3208, 0xa0);
 	}
 
 	/*Warning : shutter must be even. Odd might happen Unexpected Results */
-	write_cmos_sensor(0x3208, 0x00);
+	// write_cmos_sensor(0x3208, 0x00);
 	write_cmos_sensor(0x3500, (shutter >> 16) & 0xFF);
 	write_cmos_sensor(0x3501, (shutter >> 8) & 0xFF);
 	write_cmos_sensor(0x3502, (shutter)  & 0xFF);
-	write_cmos_sensor(0x3208, 0x10);
-	write_cmos_sensor(0x3208, 0xa0);
+	// write_cmos_sensor(0x3208, 0x10);
+	// write_cmos_sensor(0x3208, 0xa0);
 	LOG_DBG("shutter =%d, framelength =%d, realtime_fps =%d\n",
 		shutter, imgsensor.frame_length, realtime_fps);
 }
@@ -569,18 +568,19 @@
 			realtime_fps = 146;
 	    set_max_framerate(realtime_fps, 0);
 		} else {
-		imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
+		//imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
 		}
 	} else {
-	imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
+	//imgsensor.frame_length = (imgsensor.frame_length  >> 1) << 1;
 		write_cmos_sensor(0x3840, imgsensor.frame_length >> 16);
 		write_cmos_sensor(0x380e, imgsensor.frame_length >> 8);
 		write_cmos_sensor(0x380f, imgsensor.frame_length & 0xFF);
 	}
-
+        if(shutter == 3174)
+            shutter = shutter-1;
 	//write_cmos_sensor(0x3822, 0x14);
 	write_cmos_sensor(0x3500, (shutter >> 16) & 0xFF);   //need to verify
 	write_cmos_sensor(0x3501, (shutter >> 8) & 0xFF);
@@ -669,6 +669,7 @@
 #if MULTI_WRITE
 kal_uint16 addr_data_pair_init_qtech_OV50C40[] = {
 	0x0103, 0x01,
+	0x0102, 0x01,
 	0x0301, 0xc8,
 	0x0304, 0x01,
 	0x0305, 0x40,
@@ -689,7 +690,7 @@
 	0x3019, 0xc2,
 	0x301c, 0x81,
 	0x3025, 0x03,
-	0x3026, 0x00,
+	0x3026, 0x10,
 	0x3027, 0x00,
 	0x3107, 0x48,
 	0x3400, 0x0c,
@@ -722,7 +723,7 @@
 	0x354b, 0x00,
 	0x354c, 0x00,
 	0x3607, 0x01,
-	0x3608, 0xda,
+	0x3608, 0xe4,
 	0x360c, 0x03,
 	0x360e, 0x1d,
 	0x3618, 0x80,
@@ -741,6 +742,7 @@
 	0x368d, 0x00,
 	0x368e, 0x01,
 	0x3690, 0x10,
+	0x3697, 0x80,
 	0x3699, 0x1f,
 	0x369b, 0x10,
 	0x369c, 0x19,
@@ -755,7 +757,7 @@
 	0x3706, 0x2f,
 	0x3707, 0x08,
 	0x3708, 0x32,
-	0x3709, 0x60,
+	0x3709, 0x69,
 	0x370b, 0x5d,
 	0x370c, 0x0f,
 	0x3711, 0x00,
@@ -779,6 +781,7 @@
 	0x3739, 0x05,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x3754, 0xee,
 	0x375f, 0x80,
 	0x3760, 0x08,
@@ -796,10 +799,10 @@
 	0x3770, 0x3b,
 	0x379e, 0x3b,
 	0x379f, 0x3b,
-	0x37b0, 0x32,
+	0x37b0, 0x37,
 	0x37b1, 0x37,
 	0x37b2, 0x37,
-	0x37b3, 0x36,
+	0x37b3, 0x3b,
 	0x37b4, 0x3a,
 	0x37b5, 0x3a,
 	0x37ce, 0x02,
@@ -827,9 +830,9 @@
 	0x380a, 0x0c,
 	0x380b, 0x00,
 	0x380c, 0x04,
-	0x380d, 0x1a,
+	0x380d, 0x1c,
 	0x380e, 0x0c,
-	0x380f, 0x66,
+	0x380f, 0x67,
 	0x3810, 0x00,
 	0x3811, 0x08,
 	0x3812, 0x00,
@@ -923,6 +926,8 @@
 	0x3a18, 0x04,
 	0x3a36, 0x20,
 	0x3d85, 0x0b,
+	0x3d86, 0x00,
+	0x3d87, 0x12,
 	0x3d8c, 0x73,
 	0x3d8d, 0xd8,
 	0x3daa, 0x00,
@@ -931,6 +936,7 @@
 	0x3dad, 0x00,
 	0x3dae, 0x00,
 	0x3daf, 0x00,
+	0x3f01, 0x13,
 	0x3f9e, 0x03,
 	0x3f9f, 0x04,
 	0x4009, 0x01,
@@ -1012,9 +1018,10 @@
 	0x4641, 0x7f,
 	0x4642, 0x42,
 	0x4643, 0x0c,
+	0x4648, 0x0a,
 	0x4649, 0x05,
 	0x4700, 0x0a,
-	0x4701, 0x0a,
+	0x4701, 0x0c,
 	0x4702, 0x0a,
 	0x4703, 0x0a,
 	0x4704, 0x12,
@@ -1035,22 +1042,22 @@
 	0x4725, 0x01,
 	0x4726, 0x01,
 	0x4748, 0x00,
-	0x4731, 0x0f,
-	0x4732, 0x0f,
-	0x4733, 0x0a,
-	0x4734, 0x0a,
-	0x4735, 0x07,
+	0x4731, 0x0d,
+	0x4732, 0x0d,
+	0x4733, 0x0f,
+	0x4734, 0x0f,
+	0x4735, 0x0c,
 	0x4736, 0x04,
 	0x4737, 0x00,
-	0x4738, 0x0a,
-	0x4739, 0x0a,
-	0x473a, 0x07,
+	0x4738, 0x0f,
+	0x4739, 0x0f,
+	0x473a, 0x0c,
 	0x473b, 0x04,
 	0x473c, 0x00,
-	0x473d, 0x0f,
-	0x473e, 0x0a,
-	0x473f, 0x0a,
-	0x4740, 0x07,
+	0x473d, 0x0d,
+	0x473e, 0x0f,
+	0x473f, 0x0f,
+	0x4740, 0x0c,
 	0x4741, 0x04,
 	0x4742, 0x00,
 	0x4743, 0x0f,
@@ -1080,22 +1087,23 @@
 	0x4815, 0x19,
 	0x481b, 0x3c,
 	0x481f, 0x32,
-	0x4837, 0x0c,
+	0x4837, 0x0b,
 	0x484b, 0x27,
 	0x4850, 0x43,
 	0x4851, 0xaa,
+	0x4853, 0x4a,
 	0x4854, 0x06,
 	0x4860, 0x00,
 	0x4861, 0xec,
 	0x4862, 0x04,
 	0x4883, 0x00,
 	0x4888, 0x10,
-	0x4d00, 0x04,
-	0x4d01, 0xf7,
-	0x4d02, 0xb8,
-	0x4d03, 0x78,
-	0x4d04, 0x6d,
-	0x4d05, 0x36,
+	0x4d00, 0x05,
+	0x4d01, 0x0e,
+	0x4d02, 0xb7,
+	0x4d03, 0x39,
+	0x4d04, 0xcd,
+	0x4d05, 0x4e,
 	0x5000, 0x8b,
 	0x5001, 0x23,
 	0x5002, 0x9d,
@@ -1110,7 +1118,13 @@
 	0x5039, 0xe0,
 	0x503a, 0x0b,
 	0x503b, 0xe0,
+	0x504c, 0x12,
+	0x504d, 0x12,
+	0x504e, 0x12,
+	0x504f, 0x12,
+	0x5050, 0x12,
 	0x5051, 0x14,
+	0x5055, 0x12,
 	0x5081, 0x00,
 	0x5180, 0x70,
 	0x5181, 0x10,
@@ -1867,7 +1881,10 @@
 	0x3717, 0x03,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x375f, 0x80,
+	0x37b0, 0x37,
+	0x37b3, 0x3b,
 	0x3800, 0x00,
 	0x3801, 0x00,
 	0x3802, 0x00,
@@ -2227,7 +2244,10 @@
 	0x3717, 0x03,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x375f, 0x80,
+	0x37b0, 0x37,
+	0x37b3, 0x3b,
 	0x3800, 0x00,
 	0x3801, 0x00,
 	0x3802, 0x00,
@@ -2409,7 +2429,10 @@
 	0x3717, 0x03,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x375f, 0x80,
+	0x37b0, 0x37,
+	0x37b3, 0x3b,
 	0x3800, 0x00,
 	0x3801, 0x00,
 	0x3802, 0x00,
@@ -2948,7 +2971,10 @@
 	0x3717, 0x03,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x375f, 0x80,
+	0x37b0, 0x37,
+	0x37b3, 0x3b,
 	0x3800, 0x00,
 	0x3801, 0x00,
 	0x3802, 0x03,
@@ -3308,7 +3334,10 @@
 	0x3717, 0x01,
 	0x373b, 0x2a,
 	0x373d, 0x2e,
+	0x3741, 0x3c,
 	0x375f, 0x00,
+	0x37b0, 0x32,
+	0x37b3, 0x36,
 	0x3800, 0x00,
 	0x3801, 0xe0,
 	0x3802, 0x03,
@@ -3668,7 +3697,10 @@
 	0x3717, 0x01,
 	0x373b, 0x2a,
 	0x373d, 0x2e,
+	0x3741, 0x3c,
 	0x375f, 0x00,
+	0x37b0, 0x32,
+	0x37b3, 0x36,
 	0x3800, 0x00,
 	0x3801, 0xe0,
 	0x3802, 0x03,
@@ -4028,7 +4060,10 @@
 	0x3717, 0x03,
 	0x373b, 0x3c,
 	0x373d, 0x40,
+	0x3741, 0x41,
 	0x375f, 0x80,
+	0x37b0, 0x37,
+	0x37b3, 0x3b,
 	0x3800, 0x00,
 	0x3801, 0x00,
 	0x3802, 0x00,
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_aac_front_mipi_raw/ov8856_aac_front_mipiraw_Sensor.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_aac_front_mipi_raw/ov8856_aac_front_mipiraw_Sensor.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_aac_front_mipi_raw/ov8856_aac_front_mipiraw_Sensor.c	2023-09-30 14:32:16.812000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_aac_front_mipi_raw/ov8856_aac_front_mipiraw_Sensor.c	2023-09-30 10:01:17.848000013 +0700
@@ -62,7 +62,7 @@
 		/*       following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario   */
 		.mipi_data_lp2hs_settle_dc = 23,
 		/*       following for GetDefaultFramerateByScenario()  */
-		.mipi_pixel_rate = 254554699,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 		},
 	.cap = {
@@ -74,7 +74,7 @@
 		.grabwindow_width = 3264,
 		.grabwindow_height = 2448,
 		.mipi_data_lp2hs_settle_dc = 23,
-		.mipi_pixel_rate = 254554665,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 		},
 	.cap1 = {		/* capture for PIP 24fps relative information, capture1 mode must use same framelength, linelength with Capture mode for shutter calculate */
@@ -98,7 +98,7 @@
 		.grabwindow_width  = 3264,
 		.grabwindow_height = 1836,
 		.mipi_data_lp2hs_settle_dc = 85,
-		.mipi_pixel_rate = 254400000,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 			 },
 	.hs_video = {
@@ -1073,7 +1073,7 @@
 static void preview_setting(void)
 {
 	LOG_INF("E\n");
-write_cmos_sensor(0x0302, 0x35 );
+write_cmos_sensor(0x0302, 0x38 );//0x35
 write_cmos_sensor(0x0303, 0x00 );
 write_cmos_sensor(0x3501, 0x9a );
 write_cmos_sensor(0x3502, 0x20 );
@@ -1101,7 +1101,7 @@
 write_cmos_sensor(0x3821, 0x46 );
 write_cmos_sensor(0x382a, 0x01 );
 write_cmos_sensor(0x4009, 0x0b );
-write_cmos_sensor(0x4837, 0x0c );
+write_cmos_sensor(0x4837, 0x0b );//0x0c
 write_cmos_sensor(0x5795, 0x02 );
 write_cmos_sensor(0x5796, 0x20 );
 write_cmos_sensor(0x5797, 0x20 );
@@ -1118,7 +1118,7 @@
 static void capture_setting(kal_uint16 currefps)
 {
 	LOG_INF("E! currefps:%d\n", currefps);
-	write_cmos_sensor(0x0302, 0x35 );
+write_cmos_sensor(0x0302, 0x38 );//0x35
 write_cmos_sensor(0x0303, 0x00 );
 write_cmos_sensor(0x3501, 0x9a );
 write_cmos_sensor(0x3502, 0x20 );
@@ -1146,7 +1146,7 @@
 write_cmos_sensor(0x3821, 0x46 );
 write_cmos_sensor(0x382a, 0x01 );
 write_cmos_sensor(0x4009, 0x0b );
-write_cmos_sensor(0x4837, 0x0c );
+write_cmos_sensor(0x4837, 0x0b );//0x0c
 write_cmos_sensor(0x5795, 0x02 );
 write_cmos_sensor(0x5796, 0x20 );
 write_cmos_sensor(0x5797, 0x20 );
@@ -1223,7 +1223,7 @@
 static void normal_video_setting(kal_uint16 currefps)
 {
 	LOG_INF("normal_video_setting:%d\n", currefps);
-	write_cmos_sensor(0x0302, 0x35);
+	write_cmos_sensor(0x0302, 0x38);//0x35
 	write_cmos_sensor(0x0303, 0x00);
 	write_cmos_sensor(0x3501, 0x9a);
 	write_cmos_sensor(0x3502, 0x20);
@@ -1251,7 +1251,7 @@
 	write_cmos_sensor(0x3821, 0x46);
 	write_cmos_sensor(0x382a, 0x01);
 	write_cmos_sensor(0x4009, 0x0b);
-	write_cmos_sensor(0x4837, 0x0c);
+	write_cmos_sensor(0x4837, 0x0b);//0x0c
 	write_cmos_sensor(0x5795, 0x02);
 	write_cmos_sensor(0x5796, 0x20);
 	write_cmos_sensor(0x5797, 0x20);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_ofilm_front_mipi_raw/ov8856_ofilm_front_mipiraw_Sensor.c micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_ofilm_front_mipi_raw/ov8856_ofilm_front_mipiraw_Sensor.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_ofilm_front_mipi_raw/ov8856_ofilm_front_mipiraw_Sensor.c	2023-09-30 14:32:16.812000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/imgsensor/src/mt6768/camera_project/selene/ov8856_ofilm_front_mipi_raw/ov8856_ofilm_front_mipiraw_Sensor.c	2023-09-30 10:01:17.848000013 +0700
@@ -62,7 +62,7 @@
 		/*       following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario   */
 		.mipi_data_lp2hs_settle_dc = 23,
 		/*       following for GetDefaultFramerateByScenario()  */
-		.mipi_pixel_rate = 254447702,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 		},
 	.cap = {
@@ -74,7 +74,7 @@
 		.grabwindow_width = 3264,
 		.grabwindow_height = 2448,
 		.mipi_data_lp2hs_settle_dc = 23,
-		.mipi_pixel_rate = 254447660,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 		},
 	.cap1 = {		/* capture for PIP 24fps relative information, capture1 mode must use same framelength, linelength with Capture mode for shutter calculate */
@@ -98,7 +98,7 @@
 		.grabwindow_width  = 3264,
 		.grabwindow_height = 1836,
 		.mipi_data_lp2hs_settle_dc = 85,
-		.mipi_pixel_rate = 254400000,
+		.mipi_pixel_rate = 268800000,
 		.max_framerate = 300,
 			 },
 	.hs_video = {
@@ -1071,7 +1071,7 @@
 static void preview_setting(void)
 {
 	LOG_INF("E\n");
-write_cmos_sensor(0x0302, 0x35 );
+write_cmos_sensor(0x0302, 0x38 );//0x35
 write_cmos_sensor(0x0303, 0x00 );
 write_cmos_sensor(0x3501, 0x9a );
 write_cmos_sensor(0x3502, 0x20 );
@@ -1099,7 +1099,7 @@
 write_cmos_sensor(0x3821, 0x46 );
 write_cmos_sensor(0x382a, 0x01 );
 write_cmos_sensor(0x4009, 0x0b );
-write_cmos_sensor(0x4837, 0x0c );
+write_cmos_sensor(0x4837, 0x0b );//0x0c
 write_cmos_sensor(0x5795, 0x02 );
 write_cmos_sensor(0x5796, 0x20 );
 write_cmos_sensor(0x5797, 0x20 );
@@ -1116,7 +1116,7 @@
 static void capture_setting(kal_uint16 currefps)
 {
 	LOG_INF("E! currefps:%d\n", currefps);
-	write_cmos_sensor(0x0302, 0x35 );
+write_cmos_sensor(0x0302, 0x38 );//0x35
 write_cmos_sensor(0x0303, 0x00 );
 write_cmos_sensor(0x3501, 0x9a );
 write_cmos_sensor(0x3502, 0x20 );
@@ -1144,7 +1144,7 @@
 write_cmos_sensor(0x3821, 0x46 );
 write_cmos_sensor(0x382a, 0x01 );
 write_cmos_sensor(0x4009, 0x0b );
-write_cmos_sensor(0x4837, 0x0c );
+write_cmos_sensor(0x4837, 0x0b );//0x0c
 write_cmos_sensor(0x5795, 0x02 );
 write_cmos_sensor(0x5796, 0x20 );
 write_cmos_sensor(0x5797, 0x20 );
@@ -1221,7 +1221,7 @@
 static void normal_video_setting(kal_uint16 currefps)
 {
 	LOG_INF("normal_video_setting:%d\n", currefps);
-	write_cmos_sensor(0x0302, 0x35);
+	write_cmos_sensor(0x0302, 0x38);//0x35
 	write_cmos_sensor(0x0303, 0x00);
 	write_cmos_sensor(0x3501, 0x9a);
 	write_cmos_sensor(0x3502, 0x20);
@@ -1249,7 +1249,7 @@
 	write_cmos_sensor(0x3821, 0x46);
 	write_cmos_sensor(0x382a, 0x01);
 	write_cmos_sensor(0x4009, 0x0b);
-	write_cmos_sensor(0x4837, 0x0c);
+	write_cmos_sensor(0x4837, 0x0b);//0x0c
 	write_cmos_sensor(0x5795, 0x02);
 	write_cmos_sensor(0x5796, 0x20);
 	write_cmos_sensor(0x5797, 0x20);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/include/mt-plat/mt6768/include/mach/mtk_battery_table.h micode_selene-r-oss-update/drivers/misc/mediatek/include/mt-plat/mt6768/include/mach/mtk_battery_table.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/include/mt-plat/mt6768/include/mach/mtk_battery_table.h	2023-09-30 14:32:16.844000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/include/mt-plat/mt6768/include/mach/mtk_battery_table.h	2023-09-30 10:01:17.904000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -41,7 +40,9 @@
 #define MULTI_BATTERY 0
 #define BATTERY_ID_CHANNEL_NUM 2
 #define BATTERY_PROFILE_ID 0
-#define TOTAL_BATTERY_NUMBER 4
+/* K19SFAC-41 code for K19T by wanglicheng at 20210929 start */
+#define TOTAL_BATTERY_NUMBER 6
+/* K19SFAC-41 code for K19T by wanglicheng at 20210929 end */
 /*K19A HQ-123457 K19A charger of profile by wangqi at 2021/4/22 start*/
 #define SWD_MIN_VOLTAGE   686945
 #define SWD_MAX_VOLTAGE   759255
@@ -64,52 +65,52 @@
 
 /* Qmax for battery  */
 int g_Q_MAX[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
-	/*bat1,   bat2,   bat3,    bat4*/
-	{ 2946, 2712, 2490, 1965},/*T0*/
-	{ 2796, 2851, 2468, 1984},/*T1*/
-	{ 2718, 2432, 2310, 1946},/*T2*/
-	{ 2535, 1991, 1858, 1873},/*T3*/
-	{ 2523, 1960, 1843, 1851},/*T4*/
-	{ 2211, 1652, 1533, 1541},/*T5*/
-	{ 2201, 1642, 1523, 1531},/*T6*/
-	{ 2191, 1632, 1513, 1521},/*T7*/
-	{ 2181, 1622, 1503, 1511},/*T8*/
-	{ 2171, 1612, 1493, 1501} /*T9*/
+	/*bat1,   bat2,   bat3,    bat4,bat5,bat6*/
+	{ 2946, 2712, 2490, 1965, 2490, 1965},/*T0*/
+	{ 2796, 2851, 2468, 1984, 2468, 1984},/*T1*/
+	{ 2718, 2432, 2310, 1946, 2310, 1946},/*T2*/
+	{ 2535, 1991, 1858, 1873, 1858, 1873},/*T3*/
+	{ 2523, 1960, 1843, 1851, 1843, 1851},/*T4*/
+	{ 2211, 1652, 1533, 1541, 1533, 1541},/*T5*/
+	{ 2201, 1642, 1523, 1531, 1523, 1531},/*T6*/
+	{ 2191, 1632, 1513, 1521, 1513, 1521},/*T7*/
+	{ 2181, 1622, 1503, 1511, 1503, 1511},/*T8*/
+	{ 2171, 1612, 1493, 1501, 1493, 1501}/*T9*/
 };
 
 int g_Q_MAX_H_CURRENT[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{ 2646, 2412, 2190, 1665},/*T0*/
-	{ 2496, 2551, 2168, 1684},/*T1*/
-	{ 2418, 2132, 2010, 1646},/*T2*/
-	{ 2235, 1691, 1558, 1573},/*T3*/
-	{ 2223, 1660, 1543, 1551},/*T4*/
-	{ 2210, 1650, 1533, 1541},/*T5*/
-	{ 2200, 1640, 1523, 1531},/*T6*/
-	{ 2190, 1630, 1513, 1521},/*T7*/
-	{ 2180, 1620, 1503, 1511},/*T8*/
-	{ 2170, 1610, 1493, 1501} /*T9*/
+	{ 2646, 2412, 2190, 1665, 2190, 1665},/*T0*/
+	{ 2496, 2551, 2168, 1684, 2168, 1684},/*T1*/
+	{ 2418, 2132, 2010, 1646, 2010, 1646},/*T2*/
+	{ 2235, 1691, 1558, 1573, 1558, 1573},/*T3*/
+	{ 2223, 1660, 1543, 1551, 1543, 1551},/*T4*/
+	{ 2210, 1650, 1533, 1541, 1533, 1541},/*T5*/
+	{ 2200, 1640, 1523, 1531, 1523, 1531},/*T6*/
+	{ 2190, 1630, 1513, 1521, 1513, 1521},/*T7*/
+	{ 2180, 1620, 1503, 1511, 1503, 1511},/*T8*/
+	{ 2170, 1610, 1493, 1501, 1493, 1501} /*T9*/
 };
 
-int g_Q_MAX_SYS_VOLTAGE[TOTAL_BATTERY_NUMBER] = { 3400, 3400, 3400, 3400};
+int g_Q_MAX_SYS_VOLTAGE[TOTAL_BATTERY_NUMBER] = { 3400, 3400, 3400, 3400 , 3400, 3400 };
 
 /* 0~0.5V for battery 0, 0.5~1V for battery 1*/
 /* 1~1.5V for battery 2, -1 for the last one (battery 3) */
 int g_battery_id_voltage[TOTAL_BATTERY_NUMBER] = {
-	500000, 1000000, 1500000, -1};
+	500000, 1000000, 1500000, -1,-1,-1};
 
 int g_FG_PSEUDO1[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{ 12, 11, 12, 11},/*T0*/
-	{ 12, 13, 13, 12},/*T1*/
-	{ 13, 14, 15, 16},/*T2*/
-	{ 17, 18, 19, 20},/*T3*/
-	{ 21, 22, 23, 24},/*T4*/
-	{ 23, 22, 21, 20},/*T5*/
-	{ 19, 18, 17, 16},/*T6*/
-	{ 15, 14, 13, 12},/*T7*/
-	{ 11, 10, 11, 12},/*T8*/
-	{ 13, 14, 15, 16} /*T9*/
+	{ 12, 11, 12, 11, 12, 11},/*T0*/
+	{ 12, 13, 13, 12, 13, 12},/*T1*/
+	{ 13, 14, 15, 16, 15, 16},/*T2*/
+	{ 17, 18, 19, 20, 19, 20},/*T3*/
+	{ 21, 22, 23, 24, 23, 24},/*T4*/
+	{ 23, 22, 21, 20, 21, 20},/*T5*/
+	{ 19, 18, 17, 16, 17, 16},/*T6*/
+	{ 15, 14, 13, 12, 13, 12},/*T7*/
+	{ 11, 10, 11, 12, 11, 12},/*T8*/
+	{ 13, 14, 15, 16, 15, 16} /*T9*/
 };
 
 #if defined(TARGET_PRODUCT_LANCELOT) || defined(TARGET_PRODUCT_SHIVA)
@@ -129,16 +130,16 @@
 #elif defined(TARGET_PRODUCT_SELENE)
 int g_FG_PSEUDO100[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{ 99, 99, 99, 99},/*T0*/
-	{ 99, 96, 99, 99},/*T1*/
-	{ 90, 80, 80, 80},/*T2*/
-	{ 90, 80, 80, 80},/*T3*/
-	{ 100, 100, 100, 100},/*T4*/
-	{ 100, 100, 100, 100},/*T5*/
-	{ 100, 100, 100, 100},/*T6*/
-	{ 100, 100, 100, 100},/*T7*/
-	{ 100, 100, 100, 100},/*T8*/
-	{ 100, 100, 100, 100} /*T9*/
+	{ 99, 99, 99, 99 , 99, 99},/*T0*/
+	{ 99, 96, 99, 99 , 99, 99},/*T1*/
+	{ 90, 80, 80, 80 , 80, 80},/*T2*/
+	{ 90, 80, 80, 80 , 80, 80},/*T3*/
+	{ 100, 100, 100, 100, 100, 100},/*T4*/
+	{ 100, 100, 100, 100, 100, 100},/*T5*/
+	{ 100, 100, 100, 100, 100, 100},/*T6*/
+	{ 100, 100, 100, 100, 100, 100},/*T7*/
+	{ 100, 100, 100, 100, 100, 100},/*T8*/
+	{ 100, 100, 100, 100, 100, 100} /*T9*/
 };
 #else
 int g_FG_PSEUDO100[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
@@ -159,50 +160,50 @@
 /* shutdown_hl_zcv */
 int g_SHUTDOWN_HL_ZCV[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{3400, 3410, 3420, 3430},/*T0*/
-	{3450, 3460, 3470, 3480},/*T1*/
-	{3500, 3510, 3520, 3530},/*T2*/
-	{3550, 3460, 3470, 3480},/*T3*/
-	{3600, 3610, 3620, 3630},/*T4*/
-	{3601, 3611, 3621, 3631},/*T5*/
-	{3602, 3612, 3622, 3632},/*T6*/
-	{3603, 3613, 3623, 3633},/*T7*/
-	{3604, 3614, 3624, 3634},/*T8*/
-	{3605, 3615, 3625, 3635} /*T9*/
+	{3400, 3410, 3420, 3430, 3420, 3430},/*T0*/
+	{3450, 3460, 3470, 3480, 3470, 3480},/*T1*/
+	{3500, 3510, 3520, 3530, 3520, 3530},/*T2*/
+	{3550, 3460, 3470, 3480, 3470, 3480},/*T3*/
+	{3600, 3610, 3620, 3630, 3620, 3630},/*T4*/
+	{3601, 3611, 3621, 3631, 3621, 3631},/*T5*/
+	{3602, 3612, 3622, 3632, 3622, 3632},/*T6*/
+	{3603, 3613, 3623, 3633, 3623, 3633},/*T7*/
+	{3604, 3614, 3624, 3634, 3624, 3634},/*T8*/
+	{3605, 3615, 3625, 3635, 3625, 3635} /*T9*/
 };
 
 /* g_FG_PSEUDO1_OFFSET */
-int g_FG_PSEUDO1_OFFSET[TOTAL_BATTERY_NUMBER] = {0, 0, 0, 0};
+int g_FG_PSEUDO1_OFFSET[TOTAL_BATTERY_NUMBER] = {0, 0, 0, 0, 0, 0};
 /*K19A HQHW-951 K19A for FGADC by langjunjun at 2021/6/22 start*/
 /* pmic_min_vol by temp ,control by MULTI_TEMP_GAUGE0=1, 34000=3.4v */
 int g_PMIC_MIN_VOL[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{33000, 33000, 33000, 33000},/*T0*/
-	{33000, 33000, 33000, 33000},/*T1*/
-	{33000, 33000, 33000, 33000},/*T2*/
-	{32200, 32200, 32200, 32200},/*T3*/
-	{31000, 31000, 31000, 31000},/*T4*/
-	{33001, 33006, 33009, 33004},/*T5*/
-	{33002, 33007, 33008, 33003},/*T6*/
-	{33003, 33008, 33007, 33002},/*T7*/
-	{33004, 33009, 33006, 33001},/*T8*/
-	{33005, 33010, 33005, 33000} /*T9*/
+	{33000, 33000, 33000, 33000, 33000, 33000},/*T0*/
+	{33000, 33000, 33000, 33000, 33000, 33000},/*T1*/
+	{33000, 33000, 33000, 33000, 33000, 33000},/*T2*/
+	{32200, 32200, 32200, 32200, 32200, 32200},/*T3*/
+	{31000, 31000, 31000, 31000, 31000, 31000},/*T4*/
+	{33001, 33006, 33009, 33004, 33009, 33004},/*T5*/
+	{33002, 33007, 33008, 33003, 33008, 33003},/*T6*/
+	{33003, 33008, 33007, 33002, 33007, 33002},/*T7*/
+	{33004, 33009, 33006, 33001, 33006, 33001},/*T8*/
+	{33005, 33010, 33005, 33000, 33005, 33000} /*T9*/
 };
 /*K19A HQHW-951 K19A for FGADC by langjunjun at 2021/6/22 end*/
 
 /* POWERON_SYSTEM_IBOOT by temp ,control by MULTI_TEMP_GAUGE0=1 ,5000 = 500ma*/
 int g_PON_SYS_IBOOT[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{5000, 5000, 5000, 5000},/*T0*/
-	{5000, 5000, 5000, 5000},/*T1*/
-	{5000, 5000, 5000, 5000},/*T2*/
-	{5000, 5000, 5000, 5000},/*T3*/
-	{5000, 5000, 5000, 5000},/*T4*/
-	{5000, 5000, 5000, 5000},/*T5*/
-	{5000, 5000, 5000, 5000},/*T6*/
-	{5000, 5000, 5000, 5000},/*T7*/
-	{5000, 5000, 5000, 5000},/*T8*/
-	{5000, 5000, 5000, 5000} /*T9*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T0*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T1*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T2*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T3*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T4*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T5*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T6*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T7*/
+	{5000, 5000, 5000, 5000, 5000, 5000},/*T8*/
+	{5000, 5000, 5000, 5000, 5000, 5000} /*T9*/
 };
 
 #if defined(TARGET_PRODUCT_LANCELOT) || defined(TARGET_PRODUCT_SHIVA)
@@ -210,32 +211,32 @@
 /* Q_MAX_SYS_VOLTAGE by temp ,control by MULTI_TEMP_GAUGE0=1, */
 int g_QMAX_SYS_VOL[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{34000, 34000, 34000, 34000},/*T0*/
-	{34000, 34000, 34000, 34000},/*T1*/
-	{34500, 35000, 34300, 34300},/*T2*/
-	{33700, 34300, 34100, 34100},/*T3*/
-	{34300, 33800, 34300, 34300},/*T4*/
-	{34000, 34000, 34000, 34000},/*T5*/
-	{34000, 34000, 34000, 34000},/*T6*/
-	{34000, 34000, 34000, 34000},/*T7*/
-	{34000, 34000, 34000, 34000},/*T8*/
-	{34000, 34000, 34000, 34000} /*T9*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T0*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T1*/
+	{34500, 35000, 34300, 34300, 34300, 34300},/*T2*/
+	{33700, 34300, 34100, 34100, 34100, 34100},/*T3*/
+	{34300, 33800, 34300, 34300, 34300, 34300},/*T4*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T5*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T6*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T7*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T8*/
+	{34000, 34000, 34000, 34000, 34000, 34000} /*T9*/
 };
 #elif defined(TARGET_PRODUCT_SELENE)
 /*K19A HQHW-951 K19A for FGADC by langjunjun at 2021/6/22 start*/
 /* Q_MAX_SYS_VOLTAGE by temp ,control by MULTI_TEMP_GAUGE0=1, */
 int g_QMAX_SYS_VOL[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{33000, 33000, 33000, 33000},/*T0*/
-	{33000, 33000, 33000, 33000},/*T1*/
-	{35500, 35500, 33000, 33000},/*T2*/
-	{34500, 34500, 34500, 34500},/*T3*/
-	{34500, 34500, 34500, 34500},/*T4*/
-	{34000, 34000, 34000, 34000},/*T5*/
-	{34000, 34000, 34000, 34000},/*T6*/
-	{34000, 34000, 34000, 34000},/*T7*/
-	{34000, 34000, 34000, 34000},/*T8*/
-	{34000, 34000, 34000, 34000} /*T9*/
+	{33500, 33500, 33500, 33500, 33500, 33500},/*T0*/
+	{34500, 34500, 34500, 34500, 34500, 34500},/*T1*/
+	{35500, 35500, 35500, 35500, 35500, 35500},/*T2*/
+	{34500, 34500, 34500, 34500, 34500, 34500},/*T3*/
+	{34500, 34500, 34500, 34500, 34500, 34500},/*T4*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T5*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T6*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T7*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T8*/
+	{34000, 34000, 34000, 34000, 34000, 34000} /*T9*/
 };
 /*K19A HQHW-951 K19A for FGADC by langjunjun at 2021/6/22 end*/
 #else
@@ -243,16 +244,16 @@
 /* Q_MAX_SYS_VOLTAGE by temp ,control by MULTI_TEMP_GAUGE0=1, */
 int g_QMAX_SYS_VOL[MAX_TABLE][TOTAL_BATTERY_NUMBER] = {
 	/*bat1,   bat2,   bat3,    bat4*/
-	{34000, 34000, 34000, 34000},/*T0*/
-	{34000, 34000, 34000, 34000},/*T1*/
-	{34300, 34000, 34300, 34300},/*T2*/
-	{34100, 33800, 34100, 34100},/*T3*/
-	{34300, 33800, 34300, 34300},/*T4*/
-	{34000, 34000, 34000, 34000},/*T5*/
-	{34000, 34000, 34000, 34000},/*T6*/
-	{34000, 34000, 34000, 34000},/*T7*/
-	{34000, 34000, 34000, 34000},/*T8*/
-	{34000, 34000, 34000, 34000} /*T9*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T0*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T1*/
+	{34300, 34000, 34300, 34300, 34300, 34300},/*T2*/
+	{34100, 33800, 34100, 34100, 34100, 34100},/*T3*/
+	{34300, 33800, 34300, 34300, 34300, 34300},/*T4*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T5*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T6*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T7*/
+	{34000, 34000, 34000, 34000, 34000, 34000},/*T8*/
+	{34000, 34000, 34000, 34000, 34000, 34000} /*T9*/
 };
 #endif
 
@@ -857,6 +858,108 @@
 		{29159,  34459, 1187},
 		{29459,  33091, 1536},
 		{29760,  29420, 8600}
+	},
+	{
+		{0,	     43280, 975 },
+		{301,	   43170, 975 },
+		{601,	   43050, 1025},
+		{902,	   42929, 1000},
+		{1202,	 42819, 975 },
+		{1503,	 42689, 950 },
+		{1804,	 42579, 976 },
+		{2104,	 42478, 1049},
+		{2405,	 42348, 976 },
+		{2705,	 42248, 1025},
+		{3006,	 42148, 1050},
+		{3307,	 42037, 1049},
+		{3607,	 41917, 1026},
+		{3908,	 41807, 1050},
+		{4208,	 41707, 1050},
+		{4509,	 41587, 1050},
+		{4810,	 41483, 1052},
+		{5110,	 41374, 1075},
+		{5411,	 41282, 1075},
+		{5712,	 41172, 1075},
+		{6012,	 41063, 1073},
+		{6313,	 40963, 1052},
+		{6613,	 40871, 1075},
+		{6914,	 40751, 1073},
+		{7215,	 40643, 1060},
+		{7515,	 40563, 1177},
+		{7816,	 40482, 1196},
+		{8116,	 40391, 1150},
+		{8417,	 40292, 1146},
+		{8718,	 40203, 1107},
+		{9018,	 40122, 1175},
+		{9319,	 40040, 1173},
+		{9619,	 39942, 1152},
+		{9920,	 39862, 1175},
+		{10221,  39782, 1183},
+		{10521,  39701, 1245},
+		{10822,  39612, 1205},
+		{11122,  39530, 1250},
+		{11423,  39436, 1242},
+		{11724,  39308, 1172},
+		{12024,  39196, 1144},
+		{12325,  39077, 1094},
+		{12625,  38972, 1053},
+		{12926,  38899, 1066},
+		{13227,  38814, 1003},
+		{13527,  38761, 1025},
+		{13828,  38691, 1022},
+		{14128,  38625, 1007},
+		{14429,  38580, 1042},
+		{14730,  38523, 1008},
+		{15030,  38483, 1054},
+		{15331,  38440, 1071},
+		{15632,  38381, 1046},
+		{15932,  38335, 1034},
+		{16233,  38299, 1097},
+		{16533,  38243, 1169},
+		{16834,  38205, 1029},
+		{17135,  38175, 1059},
+		{17435,  38143, 1095},
+		{17736,  38103, 1084},
+		{18036,  38059, 1111},
+		{18337,  38008, 1093},
+		{18638,  37996, 1256},
+		{18938,  37968, 1156},
+		{19239,  37920, 1095},
+		{19539,  37910, 1165},
+		{19840,  37864, 1125},
+		{20141,  37832, 1130},
+		{20441,  37786, 1135},
+		{20742,  37714, 1065},
+		{21042,  37638, 1025},
+		{21343,  37582, 1030},
+		{21644,  37539, 1050},
+		{21944,  37489, 1039},
+		{22245,  37441, 1011},
+		{22545,  37401, 1077},
+		{22846,  37361, 1142},
+		{23147,  37323, 1025},
+		{23447,  37295, 1037},
+		{23748,  37264, 1069},
+		{24048,  37202, 1043},
+		{24349,  37129, 1018},
+		{24650,  37062, 1060},
+		{24950,  37029, 1185},
+		{25251,  36968, 1075},
+		{25552,  36866, 1068},
+		{25852,  36822, 1029},
+		{26153,  36797, 989 },
+		{26453,  36793, 1025},
+		{26754,  36797, 1039},
+		{27055,  36787, 1096},
+		{27355,  36774, 1178},
+		{27656,  36737, 1236},
+		{27956,  36608, 1178},
+		{28257,  36305, 1118},
+		{28558,  35848, 1115},
+		{28858,  35271, 1150},
+		{29159,  34459, 1187},
+		{29459,  33091, 1536},
+		{29760,  29420, 8600}
 	}
 
 };
@@ -1270,6 +1373,108 @@
 		{29159,  32837, 5201},
 		{29459,  28212, 5733},
 		{29760,  28180, 5625}
+	},
+	{
+		{0,	     43200, 1050},
+		{301,	   43080, 1300},
+		{601,	   42960, 1350},
+		{902,	   42839, 1300},
+		{1202,	 42719, 1325},
+		{1503,	 42619, 1350},
+		{1804,	 42509, 1375},
+		{2104,	 42388, 1401},
+		{2405,	 42278, 1450},
+		{2705,	 42168, 1450},
+		{3006,	 42067, 1474},
+		{3307,	 41938, 1449},
+		{3607,	 41837, 1424},
+		{3908,	 41727, 1400},
+		{4208,	 41617, 1401},
+		{4509,	 41527, 1450},
+		{4810,	 41413, 1448},
+		{5110,	 41313, 1425},
+		{5411,	 41212, 1427},
+		{5712,	 41093, 1448},
+		{6012,	 40993, 1429},
+		{6313,	 40893, 1475},
+		{6613,	 40803, 1475},
+		{6914,	 40716, 1481},
+		{7215,	 40665, 1550},
+		{7515,	 40599, 1550},
+		{7816,	 40465, 1541},
+		{8116,	 40289, 1454},
+		{8417,	 40159, 1502},
+		{8718,	 40043, 1525},
+		{9018,	 39964, 1530},
+		{9319,	 39905, 1589},
+		{9619,	 39854, 1720},
+		{9920,	 39792, 1670},
+		{10221,  39712, 1625},
+		{10521,  39628, 1617},
+		{10822,  39509, 1550},
+		{11122,  39408, 1545},
+		{11423,  39297, 1497},
+		{11724,  39177, 1472},
+		{12024,  39060, 1447},
+		{12325,  38970, 1419},
+		{12625,  38884, 1381},
+		{12926,  38830, 1413},
+		{13227,  38754, 1328},
+		{13527,  38703, 1350},
+		{13828,  38644, 1350},
+		{14128,  38591, 1340},
+		{14429,  38523, 1279},
+		{14730,  38483, 1308},
+		{15030,  38438, 1342},
+		{15331,  38377, 1313},
+		{15632,  38355, 1371},
+		{15932,  38321, 1354},
+		{16233,  38271, 1371},
+		{16533,  38225, 1354},
+		{16834,  38193, 1366},
+		{17135,  38155, 1334},
+		{17435,  38124, 1380},
+		{17736,  38094, 1405},
+		{18036,  38062, 1425},
+		{18337,  38022, 1416},
+		{18638,  37988, 1389},
+		{18938,  37972, 1450},
+		{19239,  37934, 1450},
+		{19539,  37904, 1450},
+		{19840,  37870, 1440},
+		{20141,  37824, 1390},
+		{20441,  37792, 1355},
+		{20742,  37752, 1375},
+		{21042,  37712, 1380},
+		{21343,  37672, 1400},
+		{21644,  37629, 1400},
+		{21944,  37584, 1395},
+		{22245,  37554, 1386},
+		{22545,  37523, 1425},
+		{22846,  37491, 1419},
+		{23147,  37453, 1406},
+		{23447,  37418, 1413},
+		{23748,  37364, 1381},
+		{24048,  37304, 1387},
+		{24349,  37239, 1337},
+		{24650,  37172, 1320},
+		{24950,  37129, 1368},
+		{25251,  37048, 1343},
+		{25552,  36982, 1318},
+		{25852,  36960, 1321},
+		{26153,  36957, 1382},
+		{26453,  36942, 1393},
+		{26754,  36920, 1396},
+		{27055,  36909, 1450},
+		{27355,  36863, 1471},
+		{27656,  36743, 1504},
+		{27956,  36423, 1457},
+		{28257,  35951, 1497},
+		{28558,  35341, 1579},
+		{28858,  34475, 1731},
+		{29159,  32837, 5201},
+		{29459,  28212, 5733},
+		{29760,  28180, 5625}
 	}
 
 };
@@ -1683,8 +1888,110 @@
 		{29159,  30540, 11925},
 		{29459,  30540, 11925},
 		{29760,  30540, 11925}
+	},
+	{
+		{0,	     43030, 1900 },
+		{301,    42880, 2100 },
+		{601,	   42770, 2200 },
+		{902,	   42649, 2225 },
+		{1202,	 42519, 2200 },
+		{1503,	 42409, 2225 },
+		{1804,	 42299, 2225 },
+		{2104,	 42179, 2225 },
+		{2405,	 42078, 2250 },
+		{2705,	 41978, 2250 },
+		{3006,	 41868, 2275 },
+		{3307,	 41748, 2276 },
+		{3607,	 41648, 2301 },
+		{3908,	 41557, 2325 },
+		{4208,	 41447, 2326 },
+		{4509,	 41337, 2351 },
+		{4810,	 41233, 2375 },
+		{5110,	 41123, 2375 },
+		{5411,	 41023, 2375 },
+		{5712,	 40925, 2377 },
+		{6012,	 40856, 2404 },
+		{6313,	 40796, 2458 },
+		{6613,	 40742, 2550 },
+		{6914,	 40639, 2546 },
+		{7215,	 40494, 2498 },
+		{7515,	 40307, 2475 },
+		{7816,	 40150, 2479 },
+		{8116,	 40029, 2523 },
+		{8417,	 39913, 2504 },
+		{8718,	 39835, 2555 },
+		{9018,	 39785, 2598 },
+		{9319,	 39733, 2577 },
+		{9619,	 39665, 2600 },
+		{9920,	 39610, 2598 },
+		{10221,  39510, 2567 },
+		{10521,  39408, 2492 },
+		{10822,  39287, 2414 },
+		{11122,  39168, 2320 },
+		{11423,  39060, 2272 },
+		{11724,  38972, 2253 },
+		{12024,  38900, 2266 },
+		{12325,  38813, 2203 },
+		{12625,  38754, 2228 },
+		{12926,  38700, 2241 },
+		{13227,  38625, 2181 },
+		{13527,  38583, 2225 },
+		{13828,  38525, 2231 },
+		{14128,  38485, 2278 },
+		{14429,  38442, 2292 },
+		{14730,  38392, 2242 },
+		{15030,  38345, 2217 },
+		{15331,  38313, 2300 },
+		{15632,  38270, 2291 },
+		{15932,  38215, 2259 },
+		{16233,  38186, 2309 },
+		{16533,  38163, 2346 },
+		{16834,  38125, 2325 },
+		{17135,  38093, 2325 },
+		{17435,  38054, 2330 },
+		{17736,  38024, 2345 },
+		{18036,  37994, 2334 },
+		{18337,  37966, 2375 },
+		{18638,  37942, 2380 },
+		{18938,  37906, 2395 },
+		{19239,  37884, 2375 },
+		{19539,  37858, 2385 },
+		{19840,  37840, 2410 },
+		{20141,  37798, 2355 },
+		{20441,  37784, 2385 },
+		{20742,  37754, 2415 },
+		{21042,  37720, 2375 },
+		{21343,  37676, 2375 },
+		{21644,  37652, 2375 },
+		{21944,  37611, 2370 },
+		{22245,  37576, 2366 },
+		{22545,  37549, 2420 },
+		{22846,  37499, 2400 },
+		{23147,  37449, 2411 },
+		{23447,  37398, 2444 },
+		{23748,  37347, 2444 },
+		{24048,  37292, 2480 },
+		{24349,  37222, 2432 },
+		{24650,  37149, 2450 },
+		{24950,  37077, 2463 },
+		{25251,  37032, 2493 },
+		{25552,  37013, 2509 },
+		{25852,  37012, 2593 },
+		{26153,  36990, 2616 },
+		{26453,  36982, 2732 },
+		{26754,  36949, 2806 },
+		{27055,  36869, 2943 },
+		{27355,  36626, 2918 },
+		{27656,  36188, 2943 },
+		{27956,  35608, 3108 },
+		{28257,  34814, 3337 },
+		{28558,  33483, 4112 },
+		{28858,  30540, 11925},
+		{29159,  30540, 11925},
+		{29459,  30540, 11925},
+		{29760,  30540, 11925}
 	}
-
+	
 };
 
 /* T3 */
@@ -2096,8 +2403,109 @@
 		{29159,  29540, 9925 },
 		{29459,  29540, 9925 },
 		{29760,  29540, 9925 }
+	},
+	{
+		{0,	     42730, 2575 },
+		{301,	   42550, 3300 },
+		{601,	   42409, 3375 },
+		{902,	   42269, 3475 },
+		{1202,	 42159, 3526 },
+		{1503,	 42059, 3600 },
+		{1804,	 41949, 3601 },
+		{2104,	 41848, 3675 },
+		{2405,	 41738, 3700 },
+		{2705,	 41638, 3725 },
+		{3006,	 41538, 3750 },
+		{3307,	 41418, 3751 },
+		{3607,	 41318, 3801 },
+		{3908,	 41217, 3825 },
+		{4208,	 41107, 3826 },
+		{4509,	 41017, 3851 },
+		{4810,	 40926, 3875 },
+		{5110,	 40868, 3885 },
+		{5411,	 40834, 4028 },
+		{5712,	 40749, 4070 },
+		{6012,	 40587, 4002 },
+		{6313,	 40414, 4021 },
+		{6613,	 40208, 3975 },
+		{6914,	 40060, 3973 },
+		{7215,	 39932, 3954 },
+		{7515,	 39833, 4002 },
+		{7816,	 39753, 4025 },
+		{8116,	 39676, 4027 },
+		{8417,	 39624, 4050 },
+		{8718,	 39554, 4048 },
+		{9018,	 39490, 4018 },
+		{9319,	 39381, 3948 },
+		{9619,	 39289, 3918 },
+		{9920,	 39179, 3840 },
+		{10221,  39072, 3750 },
+		{10521,  38991, 3747 },
+		{10822,  38903, 3725 },
+		{11122,  38832, 3714 },
+		{11423,  38763, 3633 },
+		{11724,  38706, 3706 },
+		{12024,  38663, 3750 },
+		{12325,  38604, 3747 },
+		{12625,  38554, 3728 },
+		{12926,  38503, 3753 },
+		{13227,  38445, 3778 },
+		{13527,  38405, 3803 },
+		{13828,  38364, 3819 },
+		{14128,  38316, 3785 },
+		{14429,  38282, 3850 },
+		{14730,  38235, 3858 },
+		{15030,  38203, 3896 },
+		{15331,  38165, 3883 },
+		{15632,  38133, 3929 },
+		{15932,  38095, 3950 },
+		{16233,  38065, 3959 },
+		{16533,  38033, 3991 },
+		{16834,  37996, 3959 },
+		{17135,  37975, 4005 },
+		{17435,  37946, 4030 },
+		{17736,  37924, 4050 },
+		{18036,  37896, 4059 },
+		{18337,  37876, 4109 },
+		{18638,  37852, 4140 },
+		{18938,  37818, 4105 },
+		{19239,  37804, 4120 },
+		{19539,  37776, 4105 },
+		{19840,  37752, 4125 },
+		{20141,  37714, 4120 },
+		{20441,  37684, 4110 },
+		{20742,  37658, 4155 },
+		{21042,  37642, 4170 },
+		{21343,  37599, 4150 },
+		{21644,  37554, 4166 },
+		{21944,  37517, 4225 },
+		{22245,  37457, 4236 },
+		{22545,  37397, 4275 },
+		{22846,  37339, 4292 },
+		{23147,  37284, 4350 },
+		{23447,  37211, 4356 },
+		{23748,  37134, 4381 },
+		{24048,  37087, 4433 },
+		{24349,  37075, 4538 },
+		{24650,  37055, 4615 },
+		{24950,  37037, 4772 },
+		{25251,  37022, 4934 },
+		{25552,  36984, 5079 },
+		{25852,  36896, 5266 },
+		{26153,  36678, 5396 },
+		{26453,  36268, 5526 },
+		{26754,  35713, 5844 },
+		{27055,  34954, 6319 },
+		{27355,  33750, 7523 },
+		{27656,  31528, 13715},
+		{27956,  29540, 9925 },
+		{28257,  29540, 9925 },
+		{28558,  29540, 9925 },
+		{28858,  29540, 9925 },
+		{29159,  29540, 9925 },
+		{29459,  29540, 9925 },
+		{29760,  29540, 9925 }
 	}
-
 };
 
 /* T4 */
@@ -2509,7 +2917,109 @@
 		{29159,  30950, 13150},
 		{29459,  30950, 13150},
 		{29760,  30950, 13150}
-	}
+	},
+	{
+		{0,	     42420, 9500 },
+		{301,	   42210, 5801 },
+		{601,	   41979, 6176 },
+		{902,	   41699, 6529 },
+		{1202,	 41529, 7252 },
+		{1503,	 41379, 7451 },
+		{1804,	 41259, 7577 },
+		{2104,	 41139, 7749 },
+		{2405,	 41039, 7702 },
+		{2705,	 40969, 7851 },
+		{3006,	 40899, 7927 },
+		{3307,	 40838, 8002 },
+		{3607,	 40746, 8100 },
+		{3908,	 40595, 8099 },
+		{4208,	 40404, 8075 },
+		{4509,	 40204, 8073 },
+		{4810,	 40021, 8025 },
+		{5110,	 39893, 8028 },
+		{5411,	 39783, 8078 },
+		{5712,	 39684, 8120 },
+		{6012,	 39604, 8056 },
+		{6313,	 39525, 8127 },
+		{6613,	 39455, 8156 },
+		{6914,	 39394, 8221 },
+		{7215,	 39313, 8169 },
+		{7515,	 39222, 8100 },
+		{7816,	 39122, 8094 },
+		{8116,	 39034, 8023 },
+		{8417,	 38962, 7998 },
+		{8718,	 38874, 7975 },
+		{9018,	 38803, 7973 },
+		{9319,	 38735, 7960 },
+		{9619,	 38685, 8052 },
+		{9920,	 38634, 8078 },
+		{10221,  38574, 8085 },
+		{10521,  38516, 7963 },
+		{10822,  38474, 8080 },
+		{11122,  38415, 8136 },
+		{11423,  38366, 8225 },
+		{11724,  38328, 8228 },
+		{12024,  38304, 8253 },
+		{12325,  38254, 8281 },
+		{12625,  38205, 8322 },
+		{12926,  38168, 8312 },
+		{13227,  38145, 8403 },
+		{13527,  38106, 8419 },
+		{13828,  38075, 8381 },
+		{14128,  38035, 8425 },
+		{14429,  37997, 8433 },
+		{14730,  37977, 8487 },
+		{15030,  37957, 8554 },
+		{15331,  37933, 8579 },
+		{15632,  37898, 8600 },
+		{15932,  37887, 8617 },
+		{16233,  37865, 8696 },
+		{16533,  37840, 8688 },
+		{16834,  37835, 8759 },
+		{17135,  37805, 8805 },
+		{17435,  37774, 8825 },
+		{17736,  37748, 8839 },
+		{18036,  37734, 8919 },
+		{18337,  37702, 9019 },
+		{18638,  37664, 9100 },
+		{18938,  37632, 9124 },
+		{19239,  37590, 9240 },
+		{19539,  37540, 9305 },
+		{19840,  37490, 9340 },
+		{20141,  37440, 9425 },
+		{20441,  37386, 9551 },
+		{20742,  37320, 9676 },
+		{21042,  37265, 9822 },
+		{21343,  37202, 10032},
+		{21644,  37159, 10177},
+		{21944,  37111, 10329},
+		{22245,  37074, 10595},
+		{22545,  37048, 10926},
+		{22846,  37031, 11277},
+		{23147,  36982, 11672},
+		{23447,  36894, 12228},
+		{23748,  36743, 12780},
+		{24048,  36440, 13300},
+		{24349,  35974, 13929},
+		{24650,  35322, 14812},
+		{24950,  34380, 16210},
+		{25251,  32952, 17130},
+		{25552,  31174, 13277},
+		{25852,  30950, 13150},
+		{26153,  30950, 13150},
+		{26453,  30950, 13150},
+		{26754,  30950, 13150},
+		{27055,  30950, 13150},
+		{27355,  30950, 13150},
+		{27656,  30950, 13150},
+		{27956,  30950, 13150},
+		{28257,  30950, 13150},
+		{28558,  30950, 13150},
+		{28858,  30950, 13150},
+		{29159,  30950, 13150},
+		{29459,  30950, 13150},
+		{29760,  30950, 13150}
+	},
 
 };
 
@@ -2882,6 +3392,98 @@
 		{19639, 33940, 6565},
 		{19864, 33940, 6565},
 		{20090, 33940, 6565}
+	},
+	{
+		{0, 42980, 5305},
+		{336, 42832, 5300},
+		{673, 42691, 5331},
+		{1009, 42556, 5398},
+		{1346, 42415, 5485},
+		{1682, 42266, 5548},
+		{2018, 42112, 5595},
+		{2355, 41957, 5682},
+		{2691, 41794, 5832},
+		{3028, 41626, 6033},
+		{3364, 41462, 6278},
+		{3700, 41282, 6561},
+		{4037, 41093, 6884},
+		{4373, 40898, 7298},
+		{4710, 40742, 7686},
+		{5046, 40606, 8046},
+		{5382, 40465, 8353},
+		{5719, 40292, 8598},
+		{6055, 40111, 8792},
+		{6392, 39963, 8879},
+		{6728, 39844, 9029},
+		{7064, 39739, 9179},
+		{7401, 39645, 9246},
+		{7737, 39566, 9311},
+		{8074, 39487, 9387},
+		{8410, 39392, 9497},
+		{8747, 39303, 9489},
+		{9083, 39210, 9482},
+		{9419, 39103, 9569},
+		{9756, 38984, 9502},
+		{10092, 38869, 9452},
+		{10429, 38766, 9541},
+		{10765, 38687, 9629},
+		{11101, 38611, 9693},
+		{11438, 38530, 9715},
+		{11774, 38467, 9814},
+		{12111, 38406, 9923},
+		{12447, 38346, 10032},
+		{12783, 38285, 10122},
+		{13120, 38230, 10245},
+		{13456, 38183, 10420},
+		{13793, 38149, 10574},
+		{14129, 38109, 10719},
+		{14465, 38062, 10850},
+		{14802, 38028, 11085},
+		{15138, 37991, 11315},
+		{15475, 37951, 11534},
+		{15811, 37924, 11666},
+		{16147, 37893, 11830},
+		{16484, 37860, 12028},
+		{16820, 37833, 12290},
+		{17157, 37798, 12509},
+		{17493, 37757, 12691},
+		{17829, 37717, 12909},
+		{18166, 37680, 13178},
+		{18502, 37644, 13475},
+		{18839, 37576, 13671},
+		{19175, 37517, 13920},
+		{19511, 37462, 14186},
+		{19848, 37394, 14317},
+		{20184, 37323, 14533},
+		{20521, 37250, 14798},
+		{20857, 37183, 15083},
+		{21193, 37124, 15425},
+		{21530, 37069, 15800},
+		{21866, 37009, 16194},
+		{22203, 36962, 16860},
+		{22539, 36916, 17637},
+		{22876, 36849, 18381},
+		{23212, 36719, 19140},
+		{23548, 36517, 19837},
+		{23885, 36160, 20305},
+		{24221, 35626, 20732},
+		{24558, 35047, 21203},
+		{24894, 34524, 21399},
+		{25230, 34044, 19815},
+		{25567, 32822, 15920},
+		{25903, 31200, 11603},
+		{26240, 31200, 11603},
+		{26576, 31200, 11603},
+		{26912, 31200, 11603},
+		{27249, 31200, 11603},
+		{27585, 31200, 11603},
+		{27922, 31200, 11603},
+		{28258, 31200, 11603},
+		{28594, 31200, 11603},
+		{28931, 31200, 11603},
+		{29267, 31200, 11603},
+		{29604, 31200, 11603},
+		{29940, 31200, 11605}
 	}
 
 };
@@ -3255,8 +3857,99 @@
 		{19639, 33940, 6565},
 		{19864, 33940, 6565},
 		{20090, 33940, 6565}
+	},
+	{
+		{0, 42980, 5306},
+		{336, 42832, 5300},
+		{673, 42691, 5331},
+		{1009, 42556, 5398},
+		{1346, 42415, 5485},
+		{1682, 42266, 5548},
+		{2018, 42112, 5595},
+		{2355, 41957, 5682},
+		{2691, 41794, 5832},
+		{3028, 41626, 6033},
+		{3364, 41462, 6278},
+		{3700, 41282, 6561},
+		{4037, 41093, 6884},
+		{4373, 40898, 7298},
+		{4710, 40742, 7686},
+		{5046, 40606, 8046},
+		{5382, 40465, 8353},
+		{5719, 40292, 8598},
+		{6055, 40111, 8792},
+		{6392, 39963, 8879},
+		{6728, 39844, 9029},
+		{7064, 39739, 9179},
+		{7401, 39645, 9246},
+		{7737, 39566, 9311},
+		{8074, 39487, 9387},
+		{8410, 39392, 9497},
+		{8747, 39303, 9489},
+		{9083, 39210, 9482},
+		{9419, 39103, 9569},
+		{9756, 38984, 9502},
+		{10092, 38869, 9452},
+		{10429, 38766, 9541},
+		{10765, 38687, 9629},
+		{11101, 38611, 9693},
+		{11438, 38530, 9715},
+		{11774, 38467, 9814},
+		{12111, 38406, 9923},
+		{12447, 38346, 10032},
+		{12783, 38285, 10122},
+		{13120, 38230, 10245},
+		{13456, 38183, 10420},
+		{13793, 38149, 10574},
+		{14129, 38109, 10719},
+		{14465, 38062, 10850},
+		{14802, 38028, 11085},
+		{15138, 37991, 11315},
+		{15475, 37951, 11534},
+		{15811, 37924, 11666},
+		{16147, 37893, 11830},
+		{16484, 37860, 12028},
+		{16820, 37833, 12290},
+		{17157, 37798, 12509},
+		{17493, 37757, 12691},
+		{17829, 37717, 12909},
+		{18166, 37680, 13178},
+		{18502, 37644, 13475},
+		{18839, 37576, 13671},
+		{19175, 37517, 13920},
+		{19511, 37462, 14186},
+		{19848, 37394, 14317},
+		{20184, 37323, 14533},
+		{20521, 37250, 14798},
+		{20857, 37183, 15083},
+		{21193, 37124, 15425},
+		{21530, 37069, 15800},
+		{21866, 37009, 16194},
+		{22203, 36962, 16860},
+		{22539, 36916, 17637},
+		{22876, 36849, 18381},
+		{23212, 36719, 19140},
+		{23548, 36517, 19837},
+		{23885, 36160, 20305},
+		{24221, 35626, 20732},
+		{24558, 35047, 21203},
+		{24894, 34524, 21399},
+		{25230, 34044, 19815},
+		{25567, 32822, 15920},
+		{25903, 31200, 11603},
+		{26240, 31200, 11603},
+		{26576, 31200, 11603},
+		{26912, 31200, 11603},
+		{27249, 31200, 11603},
+		{27585, 31200, 11603},
+		{27922, 31200, 11603},
+		{28258, 31200, 11603},
+		{28594, 31200, 11603},
+		{28931, 31200, 11603},
+		{29267, 31200, 11603},
+		{29604, 31200, 11603},
+		{29940, 31200, 11606}
 	}
-
 };
 
 /* T7 */
@@ -3628,8 +4321,99 @@
 		{19639, 33940, 6565},
 		{19864, 33940, 6565},
 		{20090, 33940, 6565}
-	}
-
+	},
+	{
+		{0, 42980, 5307},
+		{336, 42832, 5300},
+		{673, 42691, 5331},
+		{1009, 42556, 5398},
+		{1346, 42415, 5485},
+		{1682, 42266, 5548},
+		{2018, 42112, 5595},
+		{2355, 41957, 5682},
+		{2691, 41794, 5832},
+		{3028, 41626, 6033},
+		{3364, 41462, 6278},
+		{3700, 41282, 6561},
+		{4037, 41093, 6884},
+		{4373, 40898, 7298},
+		{4710, 40742, 7686},
+		{5046, 40606, 8046},
+		{5382, 40465, 8353},
+		{5719, 40292, 8598},
+		{6055, 40111, 8792},
+		{6392, 39963, 8879},
+		{6728, 39844, 9029},
+		{7064, 39739, 9179},
+		{7401, 39645, 9246},
+		{7737, 39566, 9311},
+		{8074, 39487, 9387},
+		{8410, 39392, 9497},
+		{8747, 39303, 9489},
+		{9083, 39210, 9482},
+		{9419, 39103, 9569},
+		{9756, 38984, 9502},
+		{10092, 38869, 9452},
+		{10429, 38766, 9541},
+		{10765, 38687, 9629},
+		{11101, 38611, 9693},
+		{11438, 38530, 9715},
+		{11774, 38467, 9814},
+		{12111, 38406, 9923},
+		{12447, 38346, 10032},
+		{12783, 38285, 10122},
+		{13120, 38230, 10245},
+		{13456, 38183, 10420},
+		{13793, 38149, 10574},
+		{14129, 38109, 10719},
+		{14465, 38062, 10850},
+		{14802, 38028, 11085},
+		{15138, 37991, 11315},
+		{15475, 37951, 11534},
+		{15811, 37924, 11666},
+		{16147, 37893, 11830},
+		{16484, 37860, 12028},
+		{16820, 37833, 12290},
+		{17157, 37798, 12509},
+		{17493, 37757, 12691},
+		{17829, 37717, 12909},
+		{18166, 37680, 13178},
+		{18502, 37644, 13475},
+		{18839, 37576, 13671},
+		{19175, 37517, 13920},
+		{19511, 37462, 14186},
+		{19848, 37394, 14317},
+		{20184, 37323, 14533},
+		{20521, 37250, 14798},
+		{20857, 37183, 15083},
+		{21193, 37124, 15425},
+		{21530, 37069, 15800},
+		{21866, 37009, 16194},
+		{22203, 36962, 16860},
+		{22539, 36916, 17637},
+		{22876, 36849, 18381},
+		{23212, 36719, 19140},
+		{23548, 36517, 19837},
+		{23885, 36160, 20305},
+		{24221, 35626, 20732},
+		{24558, 35047, 21203},
+		{24894, 34524, 21399},
+		{25230, 34044, 19815},
+		{25567, 32822, 15920},
+		{25903, 31200, 11603},
+		{26240, 31200, 11603},
+		{26576, 31200, 11603},
+		{26912, 31200, 11603},
+		{27249, 31200, 11603},
+		{27585, 31200, 11603},
+		{27922, 31200, 11603},
+		{28258, 31200, 11603},
+		{28594, 31200, 11603},
+		{28931, 31200, 11603},
+		{29267, 31200, 11603},
+		{29604, 31200, 11603},
+		{29940, 31200, 11607}
+	},
 };
 
 /* T8 */
@@ -4001,6 +4785,98 @@
 		{19639, 33940, 6565},
 		{19864, 33940, 6565},
 		{20090, 33940, 6565}
+	},
+	{
+		{0, 42980, 5308},
+		{336, 42832, 5300},
+		{673, 42691, 5331},
+		{1009, 42556, 5398},
+		{1346, 42415, 5485},
+		{1682, 42266, 5548},
+		{2018, 42112, 5595},
+		{2355, 41957, 5682},
+		{2691, 41794, 5832},
+		{3028, 41626, 6033},
+		{3364, 41462, 6278},
+		{3700, 41282, 6561},
+		{4037, 41093, 6884},
+		{4373, 40898, 7298},
+		{4710, 40742, 7686},
+		{5046, 40606, 8046},
+		{5382, 40465, 8353},
+		{5719, 40292, 8598},
+		{6055, 40111, 8792},
+		{6392, 39963, 8879},
+		{6728, 39844, 9029},
+		{7064, 39739, 9179},
+		{7401, 39645, 9246},
+		{7737, 39566, 9311},
+		{8074, 39487, 9387},
+		{8410, 39392, 9497},
+		{8747, 39303, 9489},
+		{9083, 39210, 9482},
+		{9419, 39103, 9569},
+		{9756, 38984, 9502},
+		{10092, 38869, 9452},
+		{10429, 38766, 9541},
+		{10765, 38687, 9629},
+		{11101, 38611, 9693},
+		{11438, 38530, 9715},
+		{11774, 38467, 9814},
+		{12111, 38406, 9923},
+		{12447, 38346, 10032},
+		{12783, 38285, 10122},
+		{13120, 38230, 10245},
+		{13456, 38183, 10420},
+		{13793, 38149, 10574},
+		{14129, 38109, 10719},
+		{14465, 38062, 10850},
+		{14802, 38028, 11085},
+		{15138, 37991, 11315},
+		{15475, 37951, 11534},
+		{15811, 37924, 11666},
+		{16147, 37893, 11830},
+		{16484, 37860, 12028},
+		{16820, 37833, 12290},
+		{17157, 37798, 12509},
+		{17493, 37757, 12691},
+		{17829, 37717, 12909},
+		{18166, 37680, 13178},
+		{18502, 37644, 13475},
+		{18839, 37576, 13671},
+		{19175, 37517, 13920},
+		{19511, 37462, 14186},
+		{19848, 37394, 14317},
+		{20184, 37323, 14533},
+		{20521, 37250, 14798},
+		{20857, 37183, 15083},
+		{21193, 37124, 15425},
+		{21530, 37069, 15800},
+		{21866, 37009, 16194},
+		{22203, 36962, 16860},
+		{22539, 36916, 17637},
+		{22876, 36849, 18381},
+		{23212, 36719, 19140},
+		{23548, 36517, 19837},
+		{23885, 36160, 20305},
+		{24221, 35626, 20732},
+		{24558, 35047, 21203},
+		{24894, 34524, 21399},
+		{25230, 34044, 19815},
+		{25567, 32822, 15920},
+		{25903, 31200, 11603},
+		{26240, 31200, 11603},
+		{26576, 31200, 11603},
+		{26912, 31200, 11603},
+		{27249, 31200, 11603},
+		{27585, 31200, 11603},
+		{27922, 31200, 11603},
+		{28258, 31200, 11603},
+		{28594, 31200, 11603},
+		{28931, 31200, 11603},
+		{29267, 31200, 11603},
+		{29604, 31200, 11603},
+		{29940, 31200, 11608}
 	}
 
 };
@@ -4374,8 +5250,99 @@
 		{19639, 33940, 6565},
 		{19864, 33940, 6565},
 		{20090, 33940, 6565}
+	},
+	{
+		{0, 42980, 5309},
+		{336, 42832, 5300},
+		{673, 42691, 5331},
+		{1009, 42556, 5398},
+		{1346, 42415, 5485},
+		{1682, 42266, 5548},
+		{2018, 42112, 5595},
+		{2355, 41957, 5682},
+		{2691, 41794, 5832},
+		{3028, 41626, 6033},
+		{3364, 41462, 6278},
+		{3700, 41282, 6561},
+		{4037, 41093, 6884},
+		{4373, 40898, 7298},
+		{4710, 40742, 7686},
+		{5046, 40606, 8046},
+		{5382, 40465, 8353},
+		{5719, 40292, 8598},
+		{6055, 40111, 8792},
+		{6392, 39963, 8879},
+		{6728, 39844, 9029},
+		{7064, 39739, 9179},
+		{7401, 39645, 9246},
+		{7737, 39566, 9311},
+		{8074, 39487, 9387},
+		{8410, 39392, 9497},
+		{8747, 39303, 9489},
+		{9083, 39210, 9482},
+		{9419, 39103, 9569},
+		{9756, 38984, 9502},
+		{10092, 38869, 9452},
+		{10429, 38766, 9541},
+		{10765, 38687, 9629},
+		{11101, 38611, 9693},
+		{11438, 38530, 9715},
+		{11774, 38467, 9814},
+		{12111, 38406, 9923},
+		{12447, 38346, 10032},
+		{12783, 38285, 10122},
+		{13120, 38230, 10245},
+		{13456, 38183, 10420},
+		{13793, 38149, 10574},
+		{14129, 38109, 10719},
+		{14465, 38062, 10850},
+		{14802, 38028, 11085},
+		{15138, 37991, 11315},
+		{15475, 37951, 11534},
+		{15811, 37924, 11666},
+		{16147, 37893, 11830},
+		{16484, 37860, 12028},
+		{16820, 37833, 12290},
+		{17157, 37798, 12509},
+		{17493, 37757, 12691},
+		{17829, 37717, 12909},
+		{18166, 37680, 13178},
+		{18502, 37644, 13475},
+		{18839, 37576, 13671},
+		{19175, 37517, 13920},
+		{19511, 37462, 14186},
+		{19848, 37394, 14317},
+		{20184, 37323, 14533},
+		{20521, 37250, 14798},
+		{20857, 37183, 15083},
+		{21193, 37124, 15425},
+		{21530, 37069, 15800},
+		{21866, 37009, 16194},
+		{22203, 36962, 16860},
+		{22539, 36916, 17637},
+		{22876, 36849, 18381},
+		{23212, 36719, 19140},
+		{23548, 36517, 19837},
+		{23885, 36160, 20305},
+		{24221, 35626, 20732},
+		{24558, 35047, 21203},
+		{24894, 34524, 21399},
+		{25230, 34044, 19815},
+		{25567, 32822, 15920},
+		{25903, 31200, 11603},
+		{26240, 31200, 11603},
+		{26576, 31200, 11603},
+		{26912, 31200, 11603},
+		{27249, 31200, 11603},
+		{27585, 31200, 11603},
+		{27922, 31200, 11603},
+		{28258, 31200, 11603},
+		{28594, 31200, 11603},
+		{28931, 31200, 11603},
+		{29267, 31200, 11603},
+		{29604, 31200, 11603},
+		{29940, 31200, 11609}
 	}
-
 };
 
 
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_02_0a_dsc_vdo/dsi_panel_k19a_36_02_0a_dsc_vdo.c micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_02_0a_dsc_vdo/dsi_panel_k19a_36_02_0a_dsc_vdo.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_02_0a_dsc_vdo/dsi_panel_k19a_36_02_0a_dsc_vdo.c	2023-09-30 14:32:16.948000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_02_0a_dsc_vdo/dsi_panel_k19a_36_02_0a_dsc_vdo.c	2023-09-30 10:01:17.952000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -699,23 +698,24 @@
 	MDELAY(10);
 	/* Huaqin modify for HQ-132702 by caogaojie at 2021/06/15 end */
 	/* Huaqin modify for HQ-132702 by liunianliang at 2021/05/20 end */
-	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/05 start */
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 start */
 	if(esd_flag){
 		nvt_bootloader_reset_locked();
 		push_table(NULL, tp_reset_cmd1, ARRAY_SIZE(tp_reset_cmd1), 1);
-		MDELAY(100);
+		MDELAY(10);
 		nvt_esd_vdd_tp_recovery();
-		MDELAY(100);
+		MDELAY(20);
 		push_table(NULL, tp_reset_cmd2, ARRAY_SIZE(tp_reset_cmd2), 1);
-		MDELAY(50);
+		MDELAY(10);
 		esd_flag = false;
 		g_trigger_disp_esd_recovery = false;
 	}
-	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/05 end */
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 end */
 		LCM_LOGI("[DENNIS][%s][%d]\n", __func__, __LINE__);
 	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/06 start */
-	//2:PCBA_K19A_LA 8:PCBA_K19L_LA
-	if (hq_selene_pcba_config == 2 || hq_selene_pcba_config == 8){
+	/* Huaqin modify for HQ-155949 by caogaojie at 2021/09/18 start */
+	//2:PCBA_K19A_LA 8:PCBA_K19L_LA  13:PCBA_K19S_LA
+	if (hq_selene_pcba_config == 2 || hq_selene_pcba_config == 8 || hq_selene_pcba_config == 13){
 		push_table(NULL, init_setting_vdo_K19L, ARRAY_SIZE(init_setting_vdo_K19L), 1);
 		LCM_LOGI("%s this is K19L %d\n",__func__,hq_selene_pcba_config);
 	} else {
@@ -723,6 +723,7 @@
 		LCM_LOGI("%s this is the other config %d\n",__func__,hq_selene_pcba_config);
 	}
 	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/06 end */
+	/* Huaqin modify for HQ-155949 by caogaojie at 2021/09/18 end */
 }
 
 static void lcm_suspend(void)
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/Makefile micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/Makefile
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/Makefile	2023-09-30 10:01:17.952000013 +0700
@@ -0,0 +1,24 @@
+#
+# Copyright (C) 2015 MediaTek Inc.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 2 as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+
+#
+# Makefile for misc devices that really don't fit anywhere else.
+#
+
+obj-y += dsi_panel_k19a_36_03_0c_dsc_vdo.o
+
+# Huaqin add for HQ-142518 by feiwen at 2021/06/24 start
+ccflags-$(CONFIG_MTK_LCM) += -I$(srctree)/drivers/misc/mediatek/include/mt-plat/
+ccflags-$(CONFIG_MTK_LCM) += -I$(srctree)/drivers/misc/mediatek/include/mt-plat/$(MTK_PLATFORM)/include/
+# Huaqin add for HQ-142518 by feiwen at 2021/06/24 end
+ccflags-$(CONFIG_MTK_LCM) += -I$(srctree)/drivers/misc/mediatek/lcm/inc
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/data_hw_roundedpattern.h micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/data_hw_roundedpattern.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/data_hw_roundedpattern.h	1970-01-01 08:00:00.000000000 +0800
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/data_hw_roundedpattern.h	2023-09-30 10:01:17.952000013 +0700
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2016 MediaTek Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See http://www.gnu.org/licenses/gpl-2.0.html for more details.
+ */
+
+#ifndef _DATA_HW_ROUNDEDPATTERN_H_
+#define _DATA_HW_ROUNDEDPATTERN_H_
+
+#define ROUND_CORNER_H_TOP 32
+#define ROUND_CORNER_H_BOT 32
+
+static unsigned char top_rc_pattern[] = {
+	0x1d, 0x0, 0x3, 0x1, 0x1b, 0x4, 0x38, 0x4, 0x3, 0x0, 0xf0, 0xa0,
+	0x30, 0x30, 0xa0, 0xf0,
+	0x1b, 0x0, 0x2, 0x1, 0x1d, 0x4, 0x38, 0x4, 0x3, 0x0, 0xc0, 0x60,
+	0x10, 0x60, 0xc0,
+	0x19, 0x0, 0x2, 0x1, 0x1f, 0x4, 0x38, 0x4, 0x2, 0x0, 0xa0, 0x20,
+	0x20, 0xa0,
+	0x17, 0x0, 0x2, 0x1, 0x21, 0x4, 0x38, 0x4, 0x2, 0x0, 0xb0, 0x20,
+	0x20, 0xc0,
+	0x15, 0x0, 0x2, 0x1, 0x23, 0x4, 0x38, 0x4, 0x2, 0x0, 0xc0, 0x40,
+	0x40, 0xc0,
+	0x13, 0x0, 0x2, 0x1, 0x25, 0x4, 0x38, 0x4, 0x2, 0x0, 0xf0, 0x50,
+	0x50, 0xf0,
+	0x12, 0x0, 0x2, 0x1, 0x26, 0x4, 0x38, 0x4, 0x2, 0x0, 0xb0, 0x10,
+	0x10, 0xc0,
+	0x10, 0x0, 0x2, 0x1, 0x28, 0x4, 0x38, 0x4, 0x2, 0x0, 0xf0, 0x70,
+	0x70, 0xf0,
+	0xf, 0x0, 0x2, 0x1, 0x29, 0x4, 0x38, 0x4, 0x2, 0x0, 0xd0, 0x20,
+	0x20, 0xd0,
+	0xe, 0x0, 0x2, 0x1, 0x2a, 0x4, 0x38, 0x4, 0x2, 0x0, 0xd0, 0x10,
+	0x10, 0xd0,
+	0xd, 0x0, 0x1, 0x1, 0x2b, 0x4, 0x38, 0x4, 0x2, 0x0, 0xa0, 0x10,
+	0xa0,
+	0xc, 0x0, 0x1, 0x1, 0x2c, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0, 0xa0,
+	0xb, 0x0, 0x1, 0x1, 0x2d, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0, 0xa0,
+	0xa, 0x0, 0x1, 0x1, 0x2e, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0, 0xa0,
+	0x9, 0x0, 0x1, 0x1, 0x2f, 0x4, 0x38, 0x4, 0x2, 0x0, 0xd0, 0x10,
+	0xd0,
+	0x8, 0x0, 0x2, 0x1, 0x30, 0x4, 0x38, 0x4, 0x2, 0x0, 0xd0, 0x10,
+	0x10, 0xd0,
+	0x7, 0x0, 0x2, 0x1, 0x31, 0x4, 0x38, 0x4, 0x2, 0x0, 0xf0, 0x20,
+	0x20, 0xf0,
+	0x7, 0x0, 0x1, 0x1, 0x31, 0x4, 0x38, 0x4, 0x1, 0x0, 0x70, 0x70,
+	0x6, 0x0, 0x1, 0x1, 0x32, 0x4, 0x38, 0x4, 0x1, 0x0, 0xb0, 0xc0,
+	0x5, 0x0, 0x2, 0x1, 0x33, 0x4, 0x38, 0x4, 0x2, 0x0, 0xf0, 0x10,
+	0x10, 0xf0,
+	0x5, 0x0, 0x1, 0x1, 0x33, 0x4, 0x38, 0x4, 0x1, 0x0, 0x50, 0x50,
+	0x4, 0x0, 0x1, 0x1, 0x34, 0x4, 0x38, 0x4, 0x1, 0x0, 0xc0, 0xc0,
+	0x4, 0x0, 0x1, 0x1, 0x34, 0x4, 0x38, 0x4, 0x1, 0x0, 0x40, 0x40,
+	0x3, 0x0, 0x1, 0x1, 0x35, 0x4, 0x38, 0x4, 0x1, 0x0, 0xb0, 0xc0,
+	0x3, 0x0, 0x1, 0x1, 0x35, 0x4, 0x38, 0x4, 0x1, 0x0, 0x20, 0x20,
+	0x2, 0x0, 0x1, 0x1, 0x36, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0, 0xa0,
+	0x2, 0x0, 0x1, 0x1, 0x36, 0x4, 0x38, 0x4, 0x1, 0x0, 0x20, 0x20,
+	0x1, 0x0, 0x1, 0x1, 0x37, 0x4, 0x38, 0x4, 0x1, 0x0, 0xc0, 0xc0,
+	0x1, 0x0, 0x1, 0x1, 0x37, 0x4, 0x38, 0x4, 0x1, 0x0, 0x60, 0x60,
+	0x0, 0x0, 0x1, 0x1, 0x38, 0x4, 0x38, 0x4, 0x2, 0x0, 0xf0, 0x10,
+	0xf0,
+	0x0, 0x0, 0x0, 0x1, 0x38, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0,
+	0x0, 0x0, 0x0, 0x1, 0x38, 0x4, 0x38, 0x4, 0x1, 0x0, 0x30,
+
+	0x0, 0x0, 0x0, 0x1, 0x38, 0x4, 0x38, 0x4, 0x1, 0x0, 0x30,
+	0x0, 0x0, 0x0, 0x1, 0x38, 0x4, 0x38, 0x4, 0x1, 0x0, 0xa0,
+	0x0, 0x0, 0x0, 0x1, 0x38, 0x4, 0x38, 0x4, 0x2, 0x0, 0x10, 0xef,
+	0x0, 0x0, 0x0, 0x1, 0x37, 0x4, 0x38, 0x4, 0x1, 0x0, 0x60,
+	0x0, 0x0, 0x1, 0x1, 0x37, 0x4, 0x38, 0x4, 0x1, 0x0, 0x70, 0xc0,
+	0x0, 0x0, 0x1, 0x1, 0x36, 0x4, 0x38, 0x4, 0x1, 0x0, 0x80, 0x20,
+	0x0, 0x0, 0x1, 0x1, 0x36, 0x4, 0x38, 0x4, 0x1, 0x0, 0xb0, 0xa0,
+	0x1, 0x0, 0x0, 0x1, 0x35, 0x4, 0x38, 0x4, 0x1, 0x0, 0x20,
+	0x1, 0x0, 0x1, 0x1, 0x35, 0x4, 0x38, 0x4, 0x1, 0x0, 0x50, 0xc0,
+	0x1, 0x0, 0x1, 0x1, 0x34, 0x4, 0x38, 0x4, 0x1, 0x0, 0x90, 0x40,
+	0x1, 0x0, 0x1, 0x1, 0x34, 0x4, 0x38, 0x4, 0x1, 0x0, 0xdf, 0xc0,
+	0x2, 0x0, 0x1, 0x1, 0x33, 0x4, 0x38, 0x4, 0x1, 0x0, 0x40, 0x50,
+	0x2, 0x0, 0x1, 0x1, 0x33, 0x4, 0x38, 0x4, 0x2, 0x0, 0xbf, 0x10,
+	0xef,
+	0x3, 0x0, 0x1, 0x1, 0x32, 0x4, 0x38, 0x4, 0x1, 0x0, 0x50, 0xc0,
+	0x3, 0x0, 0x1, 0x1, 0x31, 0x4, 0x38, 0x4, 0x1, 0x0, 0xdf, 0x70,
+	0x4, 0x0, 0x1, 0x1, 0x31, 0x4, 0x38, 0x4, 0x2, 0x0, 0x60, 0x20,
+	0xef,
+	0x4, 0x0, 0x2, 0x1, 0x30, 0x4, 0x38, 0x4, 0x2, 0x0, 0xef, 0x30,
+	0x10, 0xcf,
+	0x5, 0x0, 0x2, 0x1, 0x2f, 0x4, 0x38, 0x4, 0x2, 0x0, 0xdf, 0x10,
+	0x10, 0xcf,
+	0x6, 0x0, 0x1, 0x1, 0x2e, 0x4, 0x38, 0x4, 0x1, 0x0, 0xbf, 0xa0,
+	0x7, 0x0, 0x1, 0x1, 0x2d, 0x4, 0x38, 0x4, 0x1, 0x0, 0x9f, 0xa0,
+	0x8, 0x0, 0x1, 0x1, 0x2c, 0x4, 0x38, 0x4, 0x1, 0x0, 0x9f, 0xa0,
+	0x9, 0x0, 0x2, 0x1, 0x2b, 0x4, 0x38, 0x4, 0x2, 0x0, 0xbf, 0x10,
+	0x10, 0x9f,
+	0xa, 0x0, 0x2, 0x1, 0x2a, 0x4, 0x38, 0x4, 0x2, 0x0, 0xcf, 0x30,
+	0x10, 0xcf,
+	0xb, 0x0, 0x2, 0x1, 0x29, 0x4, 0x38, 0x4, 0x2, 0x0, 0xef, 0x40,
+	0x20, 0xcf,
+	0xd, 0x0, 0x2, 0x1, 0x28, 0x4, 0x38, 0x4, 0x2, 0x0, 0xaf, 0x20,
+	0x70, 0xef,
+	0xe, 0x0, 0x2, 0x1, 0x26, 0x4, 0x38, 0x4, 0x2, 0x0, 0xef, 0x7f,
+	0x10, 0xbf,
+	0x10, 0x0, 0x2, 0x1, 0x25, 0x4, 0x38, 0x4, 0x2, 0x0, 0xdf, 0x40,
+	0x50, 0xef,
+	0x12, 0x0, 0x2, 0x1, 0x23, 0x4, 0x38, 0x4, 0x2, 0x0, 0xcf, 0x5f,
+	0x40, 0xbf,
+	0x14, 0x0, 0x3, 0x1, 0x21, 0x4, 0x38, 0x4, 0x2, 0x0, 0xef, 0x7f,
+	0x20, 0x20, 0xbf,
+	0x17, 0x0, 0x2, 0x1, 0x1f, 0x4, 0x38, 0x4, 0x2, 0x0, 0x9f, 0x4f,
+	0x20, 0x9f,
+	0x19, 0x0, 0x4, 0x1, 0x1d, 0x4, 0x38, 0x4, 0x3, 0x0, 0xef, 0x9f,
+	0x5f, 0x10, 0x10, 0x5f, 0xbf,
+	0x1d, 0x0, 0x3, 0x1, 0x1b, 0x4, 0x38, 0x4, 0x3, 0x0, 0xbf, 0x6f,
+	0x20, 0x30, 0x9f, 0xef,
+};
+
+#endif
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/dsi_panel_k19a_36_03_0c_dsc_vdo.c micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/dsi_panel_k19a_36_03_0c_dsc_vdo.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/dsi_panel_k19a_36_03_0c_dsc_vdo.c	1970-01-01 08:00:00.000000000 +0800
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_36_03_0c_dsc_vdo/dsi_panel_k19a_36_03_0c_dsc_vdo.c	2023-09-30 10:01:17.952000013 +0700
@@ -0,0 +1,727 @@
+/*
+ * Copyright (C) 2015 MediaTek Inc.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#define LOG_TAG "LCM"
+
+#ifndef BUILD_LK
+#  include <linux/string.h>
+#  include <linux/kernel.h>
+#endif
+#include <linux/gpio.h>
+#ifdef CONFIG_MTK_ROUND_CORNER_SUPPORT
+#include "data_hw_roundedpattern.h"
+#endif
+
+#include "lcm_drv.h"
+#include "mtk_boot_common.h"
+#include <linux/hqsysfs.h>
+#ifdef BUILD_LK
+#  include <platform/upmu_common.h>
+#  include <platform/mt_gpio.h>
+#  include <platform/mt_i2c.h>
+#  include <platform/mt_pmic.h>
+#  include <string.h>
+#elif defined(BUILD_UBOOT)
+#  include <asm/arch/mt_gpio.h>
+#endif
+
+#ifdef mdelay
+#undef mdelay
+#endif
+
+#ifdef udelay
+#undef udelay
+#endif
+
+
+#ifdef BUILD_LK
+#  define LCM_LOGI(string, args...)  dprintf(0, "[LK/"LOG_TAG"]"string, ##args)
+#  define LCM_LOGD(string, args...)  dprintf(1, "[LK/"LOG_TAG"]"string, ##args)
+#else
+#  define LCM_LOGI(fmt, args...)  pr_err("[KERNEL/"LOG_TAG"]"fmt, ##args)
+#  define LCM_LOGD(fmt, args...)  pr_err("[KERNEL/"LOG_TAG"]"fmt, ##args)
+#endif
+
+#define LCM_ID_nt36672c 0x83
+static struct LCM_UTIL_FUNCS lcm_util;
+
+#define SET_RESET_PIN(v)	(lcm_util.set_reset_pin((v)))
+#define MDELAY(n)		(lcm_util.mdelay(n))
+#define UDELAY(n)		(lcm_util.udelay(n))
+
+#define dsi_set_cmdq_V22(cmdq, cmd, count, ppara, force_update) \
+		lcm_util.dsi_set_cmdq_V22(cmdq, cmd, count, ppara, force_update)
+#define dsi_set_cmdq_V2(cmd, count, ppara, force_update) \
+		lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
+#define dsi_set_cmdq(pdata, queue_size, force_update) \
+		lcm_util.dsi_set_cmdq(pdata, queue_size, force_update)
+#define wrtie_cmd(cmd) lcm_util.dsi_write_cmd(cmd)
+#define write_regs(addr, pdata, byte_nums) \
+		lcm_util.dsi_write_regs(addr, pdata, byte_nums)
+#define read_reg(cmd)	lcm_util.dsi_dcs_read_lcm_reg(cmd)
+#define read_reg_v2(cmd, buffer, buffer_size) \
+		lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)
+
+#ifndef BUILD_LK
+#  include <linux/kernel.h>
+#  include <linux/module.h>
+#  include <linux/fs.h>
+#  include <linux/slab.h>
+#  include <linux/init.h>
+#  include <linux/list.h>
+#  include <linux/i2c.h>
+#  include <linux/irq.h>
+#  include <linux/uaccess.h>
+#  include <linux/interrupt.h>
+#  include <linux/io.h>
+#  include <linux/platform_device.h>
+#endif
+
+#include <linux/i2c.h>
+#include <linux/i2c-dev.h>
+#include "lcm_i2c.h"
+
+#define FRAME_WIDTH			(1080)
+#define FRAME_HEIGHT			(2400)
+
+/* physical size in um */
+#define LCM_PHYSICAL_WIDTH		(67716)
+#define LCM_PHYSICAL_HEIGHT		(150480)
+#define LCM_DENSITY			(405)
+
+#define REGFLAG_DELAY			0xFFFC
+#define REGFLAG_UDELAY			0xFFFB
+#define REGFLAG_END_OF_TABLE		0xFFFD
+#define REGFLAG_RESET_LOW		0xFFFE
+#define REGFLAG_RESET_HIGH		0xFFFF
+
+#ifndef TRUE
+#define TRUE 1
+#endif
+
+#ifndef FALSE
+#define FALSE 0
+#endif
+
+#ifdef CONFIG_MTK_MT6382_BDG
+#define DSC_ENABLE
+#endif
+
+/* i2c control start */
+
+#define LCM_I2C_ADDR 0x3E
+#define LCM_I2C_BUSNUM  1	/* for I2C channel 0 */
+#define LCM_I2C_ID_NAME "I2C_LCD_BIAS"
+
+
+static unsigned ENP = 490; //gpio165
+static unsigned ENN = 494; //gpio169
+
+#define GPIO_LCD_BIAS_ENP   ENP
+#define GPIO_LCD_BIAS_ENN   ENN
+
+/* Huaqin add for HQ-148570 by jiangyue at 2021/10/15 start */
+extern bool fts_gesture_flag;
+/* Huaqin add for HQ-148570 by jiangyue at 2021/10/15 end */
+
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+extern int32_t fts_ts_tp_suspend(void);
+extern int32_t fts_ts_tp_resume(void);
+extern bool esd_flag;
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
+
+#ifdef CONFIG_MI_ERRFLAG_ESD_CHECK_ENABLE
+
+#endif
+/*****************************************************************************
+ * Function Prototype
+ *****************************************************************************/
+static int _lcm_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id);
+static int _lcm_i2c_remove(struct i2c_client *client);
+
+/*K19A coad for HQ-147450 by feiwen at 2021/7/23 start*/
+void fts_fwresume_work(void);
+/*K19A coad for HQ-147450 by feiwen at 2021/7/23 end*/
+
+/*****************************************************************************
+ * Data Structure
+ *****************************************************************************/
+struct _lcm_i2c_dev {
+	struct i2c_client *client;
+
+};
+
+static const struct of_device_id _lcm_i2c_of_match[] = {
+	{ .compatible = "mediatek,I2C_LCD_BIAS", },
+	{},
+};
+
+static const struct i2c_device_id _lcm_i2c_id[] = {
+	{LCM_I2C_ID_NAME, 0},
+	{}
+};
+
+static struct i2c_driver _lcm_i2c_driver = {
+	.id_table = _lcm_i2c_id,
+	.probe = _lcm_i2c_probe,
+	.remove = _lcm_i2c_remove,
+	/* .detect               = _lcm_i2c_detect, */
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = LCM_I2C_ID_NAME,
+		   .of_match_table = _lcm_i2c_of_match,
+		   },
+
+};
+
+/*****************************************************************************
+ * Function
+ *****************************************************************************/
+static int _lcm_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	pr_debug("[LCM][I2C] %s\n", __func__);
+	pr_debug("[LCM][I2C] NT: info==>name=%s addr=0x%x\n",
+		client->name, client->addr);
+	_lcm_i2c_client = client;
+	return 0;
+}
+
+
+static int _lcm_i2c_remove(struct i2c_client *client)
+{
+	pr_debug("[LCM][I2C] %s\n", __func__);
+	_lcm_i2c_client = NULL;
+	i2c_unregister_device(client);
+	return 0;
+}
+
+
+/*
+ * module load/unload record keeping
+ */
+static int __init _lcm_i2c_init(void)
+{
+	pr_debug("[LCM][I2C] %s\n", __func__);
+	i2c_add_driver(&_lcm_i2c_driver);
+	pr_debug("[LCM][I2C] %s success\n", __func__);
+	return 0;
+}
+
+static void __exit _lcm_i2c_exit(void)
+{
+	pr_debug("[LCM][I2C] %s\n", __func__);
+	i2c_del_driver(&_lcm_i2c_driver);
+}
+
+module_init(_lcm_i2c_init);
+module_exit(_lcm_i2c_exit);
+/* i2c control end */
+
+struct LCM_setting_table {
+	unsigned int cmd;
+	unsigned char count;
+	unsigned char para_list[64];
+};
+/* Huaqin add for HQ-148587 by caogaojie at 2021/10/8 start */
+static struct LCM_setting_table lcm_suspend_setting[] = {
+	{0x28, 0, {} },
+	{REGFLAG_DELAY, 20, {} },
+	{0x10, 0, {} },
+	{0X35, 1, {0X00} },
+	{REGFLAG_DELAY, 120, {} },
+	{0x00, 1, {0x00} },
+	{0x00, 1, {0x00} },
+	{0xF7, 4, {0x5A,0xA5,0x95,0x27}}
+};
+/* Huaqin add for HQ-148587 by caogaojie at 2021/10/8 end */
+static struct LCM_setting_table init_setting_vdo[] = {
+	{0x00,1,{0x00}},
+	{0xFF,3,{0x87,0x20,0x01}},
+	{0x00,1,{0x80}},
+	{0xFF,2,{0x87,0x20}},
+/* Huaqin add for HQ-179522 by jiangyue at 2022/03/18 start */
+	{0x00,1,{0xAE}},
+	{0xC1,2,{0xFF,0xFF}},
+/* Huaqin add for HQ-179522 by jiangyue at 2022/03/18 end */
+	{0x00,1,{0xB0}},
+	{0xB4,14,{0x00,0x08,0x00,0xAA,0x00,0x2B,0x00,0x07,0x0D,0xB7,0x0C,0xB7,0x1B,0xA0}},
+/* Huaqin add for HQ-167526 by jiangyue at 2021/11/23 start */
+	{0x00,1,{0x82}},
+	{0xCE,1,{0x17}},
+	{0x00,1,{0x94}},
+	{0xC5,1,{0x07}},
+	{0x00,1,{0x98}},
+	{0xC5,1,{0x24}},
+	{0x00,1,{0x90}},
+	{0xA7,1,{0x16}},
+	{0x00,1,{0xF0}},
+	{0xCF,1,{0x01}},
+/* Huaqin add for HQ-167526 by jiangyue at 2021/11/23 end */
+	{0x00,1,{0x00}},
+	{0xFF,3,{0xFF,0xFF,0xFF}},
+	{0x11,0,{}},
+	{REGFLAG_DELAY,120, {}},
+	{0x29,0,{}},
+	{0x35,1,{0x00}},
+	{REGFLAG_DELAY,20, {}},
+};
+
+
+static struct LCM_setting_table
+__maybe_unused lcm_deep_sleep_mode_in_setting[] = {
+	{0x28, 1, {0x00} },
+	{REGFLAG_DELAY, 50, {} },
+	{0x10, 1, {0x00} },
+	{REGFLAG_DELAY, 150, {} },
+};
+
+static struct LCM_setting_table __maybe_unused lcm_sleep_out_setting[] = {
+	{0x11, 1, {0x00} },
+	{REGFLAG_DELAY, 120, {} },
+	{0x29, 1, {0x00} },
+	{REGFLAG_DELAY, 50, {} },
+};
+
+static struct LCM_setting_table bl_level[] = {
+	{0x51, 1, {0xFF} },
+	{REGFLAG_END_OF_TABLE, 0x00, {} }
+};
+
+
+static void push_table(void *cmdq, struct LCM_setting_table *table,
+		       unsigned int count, unsigned char force_update)
+{
+	unsigned int i;
+	unsigned int cmd;
+
+	for (i = 0; i < count; i++) {
+		cmd = table[i].cmd;
+		switch (cmd) {
+		case REGFLAG_DELAY:
+			if (table[i].count <= 10)
+				MDELAY(table[i].count);
+			else
+				MDELAY(table[i].count);
+			break;
+		case REGFLAG_UDELAY:
+			UDELAY(table[i].count);
+			break;
+		case REGFLAG_END_OF_TABLE:
+			break;
+		default:
+			dsi_set_cmdq_V22(cmdq, cmd, table[i].count,
+					 table[i].para_list, force_update);
+			if (table[i].count > 1)
+				MDELAY(1);
+			break;
+		}
+	}
+}
+
+static void lcm_set_gpio_output(unsigned GPIO, unsigned int output)
+{
+	int ret;
+
+	ret = gpio_request(GPIO, "GPIO");
+	if (ret < 0) {
+		pr_err("[%s]: GPIO requset fail!\n", __func__);
+	}
+
+	if (gpio_is_valid(GPIO)) {
+		ret = gpio_direction_output(GPIO, output);
+			if (ret < 0) {
+				pr_err("[%s]: failed to set output", __func__);
+			}
+	}
+
+	gpio_free(GPIO);
+}
+
+static void lcm_set_util_funcs(const struct LCM_UTIL_FUNCS *util)
+{
+	memcpy(&lcm_util, util, sizeof(struct LCM_UTIL_FUNCS));
+}
+
+#ifdef CONFIG_MTK_HIGH_FRAME_RATE
+static void lcm_dfps_int(struct LCM_DSI_PARAMS *dsi)
+{
+	struct dfps_info *dfps_params = dsi->dfps_params;
+
+	dsi->dfps_enable = 1;
+	dsi->dfps_default_fps = 6000;/*real fps * 100, to support float*/
+	dsi->dfps_def_vact_tim_fps = 9000;/*real vact timing fps * 100*/
+	/* traversing array must less than DFPS_LEVELS */
+	/* DPFS_LEVEL0 */
+	dfps_params[0].level = DFPS_LEVEL0;
+	dfps_params[0].fps = 6000;/*real fps * 100, to support float*/
+	dfps_params[0].vact_timing_fps = 9000;/*real vact timing fps * 100*/
+	/* if mipi clock solution */
+	/* dfps_params[0].PLL_CLOCK = 574; */
+	/* dfps_params[0].data_rate = xx; */
+	/* Huaqin add for HQ-148591 by jiangyue at 2021/10/27 start */
+	dfps_params[0].vertical_frontporch = 1250;
+	dfps_params[0].vertical_frontporch_for_low_power = 2430;
+	/* Huaqin add for HQ-148591 by jiangyue at 2021/10/27 end */
+  
+	/* DPFS_LEVEL1 */
+	dfps_params[1].level = DFPS_LEVEL1;
+	dfps_params[1].fps = 9000;/*real fps * 100, to support float*/
+	dfps_params[1].vact_timing_fps = 9000;/*real vact timing fps * 100*/
+	/* if mipi clock solution */
+	/* dfps_params[1].PLL_CLOCK = 380; */
+	/* dfps_params[1].data_rate = xx; */
+	dfps_params[1].vertical_frontporch = 54;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	dfps_params[1].vertical_frontporch_for_low_power = 2430;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
+  
+	dsi->dfps_num = 2;
+}
+#endif
+
+static void lcm_get_params(struct LCM_PARAMS *params)
+{
+	// unsigned int i = 0;tting
+	// unsigned int dynamic_fps_levels = 0;
+
+	memset(params, 0, sizeof(struct LCM_PARAMS));
+
+	params->type = LCM_TYPE_DSI;
+
+	params->width = FRAME_WIDTH;
+	params->height = FRAME_HEIGHT;
+	params->physical_width = LCM_PHYSICAL_WIDTH / 1000;
+	params->physical_height = LCM_PHYSICAL_HEIGHT / 1000;
+	params->physical_width_um = LCM_PHYSICAL_WIDTH;
+	params->physical_height_um = LCM_PHYSICAL_HEIGHT;
+	params->density = LCM_DENSITY;
+
+	params->dsi.mode = SYNC_PULSE_VDO_MODE;
+	params->dsi.switch_mode = CMD_MODE;
+	lcm_dsi_mode = SYNC_PULSE_VDO_MODE;
+	LCM_LOGI("%s: lcm_dsi_mode %d\n", __func__, lcm_dsi_mode);
+	params->dsi.switch_mode_enable = 0;
+	/* DSI */
+	/* Command mode setting */
+	params->dsi.LANE_NUM = LCM_FOUR_LANE;
+	/* The following defined the fomat for data coming from LCD engine. */
+	params->dsi.data_format.color_order = LCM_COLOR_ORDER_RGB;
+	params->dsi.data_format.trans_seq = LCM_DSI_TRANS_SEQ_MSB_FIRST;
+	params->dsi.data_format.padding = LCM_DSI_PADDING_ON_LSB;
+	params->dsi.data_format.format = LCM_DSI_FORMAT_RGB888;
+
+	/* Highly depends on LCD driver capability. */
+	params->dsi.packet_size = 256;
+	/* video mode timing */
+
+	params->dsi.PS = LCM_PACKED_PS_24BIT_RGB888;
+
+	params->dsi.vertical_sync_active = 4;
+	params->dsi.vertical_backporch = 20;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	params->dsi.vertical_frontporch = 54;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
+	//params->dsi.vertical_frontporch_for_low_power = 750;
+	params->dsi.vertical_active_line = FRAME_HEIGHT;
+
+	params->dsi.horizontal_sync_active = 10;
+	/* Huaqin add for HQ-148591 by jiangyue at 2021/10/27 start */
+	params->dsi.horizontal_backporch = 34;
+	/* Huaqin add for HQ-148591 by jiangyue at 2021/10/27 end */
+	params->dsi.horizontal_frontporch = 165;
+	params->dsi.horizontal_active_pixel = FRAME_WIDTH;
+	params->dsi.ssc_disable = 1;
+#ifdef CONFIG_MTK_MT6382_BDG
+	params->dsi.bdg_ssc_disable = 1;
+	params->dsi.dsc_params.ver = 17;
+	params->dsi.dsc_params.slice_mode = 1;
+	params->dsi.dsc_params.rgb_swap = 0;
+	params->dsi.dsc_params.dsc_cfg = 34;
+	params->dsi.dsc_params.rct_on = 1;
+	params->dsi.dsc_params.bit_per_channel = 8;
+	params->dsi.dsc_params.dsc_line_buf_depth = 9;
+	params->dsi.dsc_params.bp_enable = 1;
+	params->dsi.dsc_params.bit_per_pixel = 128;
+	params->dsi.dsc_params.pic_height = 2400;
+	params->dsi.dsc_params.pic_width = 1080;
+	params->dsi.dsc_params.slice_height = 8;
+	params->dsi.dsc_params.slice_width = 540;
+	params->dsi.dsc_params.chunk_size = 540;
+	params->dsi.dsc_params.xmit_delay = 170;
+	params->dsi.dsc_params.dec_delay = 526;
+	params->dsi.dsc_params.scale_value = 32;
+	params->dsi.dsc_params.increment_interval = 43;
+	params->dsi.dsc_params.decrement_interval = 7;
+	params->dsi.dsc_params.line_bpg_offset = 12;
+	params->dsi.dsc_params.nfl_bpg_offset = 3511;
+	params->dsi.dsc_params.slice_bpg_offset = 3255;
+	params->dsi.dsc_params.initial_offset = 6144;
+	params->dsi.dsc_params.final_offset = 7072;
+	params->dsi.dsc_params.flatness_minqp = 3;
+	params->dsi.dsc_params.flatness_maxqp = 12;
+	params->dsi.dsc_params.rc_model_size = 8192;
+	params->dsi.dsc_params.rc_edge_factor = 6;
+	params->dsi.dsc_params.rc_quant_incr_limit0 = 11;
+	params->dsi.dsc_params.rc_quant_incr_limit1 = 11;
+	params->dsi.dsc_params.rc_tgt_offset_hi = 3;
+	params->dsi.dsc_params.rc_tgt_offset_lo = 3;
+#endif
+	params->dsi.dsc_enable = 0;
+#ifndef CONFIG_FPGA_EARLY_PORTING
+	/* this value must be in MTK suggested table */
+#ifdef DSC_ENABLE
+	params->dsi.bdg_dsc_enable = 1;
+	params->dsi.PLL_CLOCK = 380; //with dsc
+#else
+	params->dsi.bdg_dsc_enable = 0;
+	params->dsi.PLL_CLOCK = 550; //without dsc
+#endif
+	params->dsi.PLL_CK_CMD = 480;
+#else
+	params->dsi.pll_div1 = 0;
+	params->dsi.pll_div2 = 0;
+	params->dsi.fbk_div = 0x1;
+#endif
+	params->dsi.CLK_HS_POST = 36;
+	params->dsi.clk_lp_per_line_enable = 0;
+#ifdef CONFIG_MI_ERRFLAG_ESD_CHECK_ENABLE
+	params->dsi.esd_check_enable = 1;
+#endif
+
+	//params->dsi.esd_check_enable = 1;
+	params->dsi.customization_esd_check_enable = 0;
+	/*params->dsi.lcm_esd_check_table[0].cmd = 0x0a;
+	params->dsi.lcm_esd_check_table[0].count = 1;
+	params->dsi.lcm_esd_check_table[0].para_list[0] = 0x9c;*/
+
+#ifdef CONFIG_MTK_ROUND_CORNER_SUPPORT
+	params->round_corner_en = 0;
+	params->corner_pattern_height = ROUND_CORNER_H_TOP;
+	params->corner_pattern_height_bot = ROUND_CORNER_H_BOT;
+	params->corner_pattern_tp_size = sizeof(top_rc_pattern);
+	params->corner_pattern_lt_addr = (void *)top_rc_pattern;
+#endif
+
+	#ifdef CONFIG_MTK_HIGH_FRAME_RATE
+	/****DynFPS start****/
+	lcm_dfps_int(&(params->dsi));
+	/****DynFPS end****/
+	#endif
+}
+
+/* turn on gate ic & control voltage to 5.5V */
+
+
+
+static void lcm_init_power(void)
+{
+	LCM_LOGI("[nt36672D] %s enter\n", __func__);
+	SET_RESET_PIN(0);
+	MDELAY(3);
+	lcm_set_gpio_output(GPIO_LCD_BIAS_ENP, 1);
+	/* Huaqin add for HQ-148587 by caogaojie at 2021/10/8 start */
+	MDELAY(5);
+	/* Huaqin add for HQ-148587 by caogaojie at 2021/10/8 end */
+	lcm_set_gpio_output(GPIO_LCD_BIAS_ENN, 1);
+	MDELAY(15);
+
+	LCM_LOGI("[nt36672D] %s exit\n", __func__);
+}
+
+static void lcm_suspend_power(void)
+{
+/* Huaqin add for HQ-148570 by jiangyue at 2021/10/15 start */
+	if(!fts_gesture_flag)
+	{
+		lcm_set_gpio_output(GPIO_LCD_BIAS_ENN, 0);
+		MDELAY(3);
+		lcm_set_gpio_output(GPIO_LCD_BIAS_ENP, 0);
+		MDELAY(5);
+	}
+}
+/* Huaqin add for HQ-148570 by jiangyue at 2021/10/15 end */
+
+static void lcm_resume_power(void)
+{
+
+	LCM_LOGI("[DENNIS][%s][%d]\n", __func__, __LINE__);
+	lcm_init_power();
+
+}
+
+static void lcm_init(void)
+{
+
+      	SET_RESET_PIN(1);
+      	MDELAY(5);
+      	SET_RESET_PIN(0);
+      	MDELAY(2);
+      	SET_RESET_PIN(1);
+	MDELAY(20);
+/*K19A coad for HQ-147450 by feiwen at 2021/7/23 start*/
+	fts_fwresume_work();
+	/*K19A coad for HQ-147450 by feiwen at 2021/7/23 end*/
+	push_table(NULL, init_setting_vdo, ARRAY_SIZE(init_setting_vdo), 1);
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+	if (esd_flag == true) {
+	    LCM_LOGI("%s, Now esd_flag = %d\n", __func__, esd_flag);
+	    fts_ts_tp_resume();
+	}
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
+}
+
+static void lcm_suspend(void)
+{
+
+	LCM_LOGI("[DENNIS][%s][%d]\n", __func__, __LINE__);
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+	if (esd_flag == true) {
+	    LCM_LOGI("%s, Now esd_flag = %d\n", __func__, esd_flag);
+	    fts_ts_tp_suspend();
+	}
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
+	push_table(NULL, lcm_suspend_setting,
+		   ARRAY_SIZE(lcm_suspend_setting), 1);
+}
+
+static void lcm_resume(void)
+{
+	LCM_LOGI("[DENNIS][%s][%d]\n", __func__, __LINE__);
+	lcm_init();
+
+}
+
+static unsigned int lcm_ata_check(unsigned char *buffer)
+{
+#ifndef BUILD_LK
+	unsigned int ret = 0;
+	unsigned int id[3] = {0x83, 0x11, 0x2B};
+	unsigned int data_array[3];
+	unsigned char read_buf[3];
+
+	data_array[0] = 0x00033700; /* set max return size = 3 */
+	dsi_set_cmdq(data_array, 1, 1);
+
+	read_reg_v2(0x04, read_buf, 3); /* read lcm id */
+
+	LCM_LOGI("ATA read = 0x%x, 0x%x, 0x%x\n",
+		 read_buf[0], read_buf[1], read_buf[2]);
+
+	if ((read_buf[0] == id[0]) &&
+	    (read_buf[1] == id[1]) &&
+	    (read_buf[2] == id[2]))
+		ret = 1;
+	else
+		ret = 0;
+
+	return ret;
+#else
+	return 0;
+#endif
+}
+
+static void lcm_setbacklight_cmdq(void *handle, unsigned int level)
+{
+	pr_err("%s,nt36672c backlight: level = %d\n", __func__, level);
+
+	bl_level[0].para_list[0] = level;
+
+	push_table(handle, bl_level, ARRAY_SIZE(bl_level), 1);
+}
+
+static void lcm_set_hw_info(void)
+{
+	/* Huaqin add for HQ-148560 by caogaojie at 2021/9/30 start */
+	hq_regiser_hw_info(HWID_LCM, "incell,vendor:TianMa,IC:ft8720M(focal)");
+	/* Huaqin add for HQ-148560 by caogaojie at 2021/9/30 end */
+}
+
+static void lcm_update(unsigned int x, unsigned int y, unsigned int width,
+	unsigned int height)
+{
+	unsigned int x0 = x;
+	unsigned int y0 = y;
+	unsigned int x1 = x0 + width - 1;
+	unsigned int y1 = y0 + height - 1;
+
+	unsigned char x0_MSB = ((x0 >> 8) & 0xFF);
+	unsigned char x0_LSB = (x0 & 0xFF);
+	unsigned char x1_MSB = ((x1 >> 8) & 0xFF);
+	unsigned char x1_LSB = (x1 & 0xFF);
+	unsigned char y0_MSB = ((y0 >> 8) & 0xFF);
+	unsigned char y0_LSB = (y0 & 0xFF);
+	unsigned char y1_MSB = ((y1 >> 8) & 0xFF);
+	unsigned char y1_LSB = (y1 & 0xFF);
+
+	unsigned int data_array[16];
+
+#ifdef LCM_SET_DISPLAY_ON_DELAY
+	lcm_set_display_on();
+#endif
+
+	data_array[0] = 0x00053902;
+	data_array[1] = (x1_MSB << 24) | (x0_LSB << 16) | (x0_MSB << 8) | 0x2a;
+	data_array[2] = (x1_LSB);
+	dsi_set_cmdq(data_array, 3, 1);
+
+	data_array[0] = 0x00053902;
+	data_array[1] = (y1_MSB << 24) | (y0_LSB << 16) | (y0_MSB << 8) | 0x2b;
+	data_array[2] = (y1_LSB);
+	dsi_set_cmdq(data_array, 3, 1);
+
+	data_array[0] = 0x002c3909;
+	dsi_set_cmdq(data_array, 1, 0);
+}
+static unsigned int lcm_compare_id(void)
+{
+	unsigned int id = 0;
+	unsigned char buffer[1];
+	unsigned int array[16];
+
+	array[0] = 0x00013700;  /* read id return 1byte */
+	dsi_set_cmdq(array, 1, 1);
+
+	read_reg_v2(0xDA, buffer, 1);
+	id = buffer[0];     /* we only need ID */
+
+	LCM_LOGI("%s,nt36672c id = 0x%08x\n", __func__, id);
+
+	if (id == LCM_ID_nt36672c)
+		return 1;
+	else
+		return 0;
+
+}
+/* Huaqin add for HQ-148560 by caogaojie at 2021/9/30 start */
+struct LCM_DRIVER dsi_panel_k19a_36_03_0c_dsc_vdo_lcm_drv = {
+	.name = "dsi_panel_k19s_36_03_0c_dsc_vdo_lcm_drv",
+	.set_util_funcs = lcm_set_util_funcs,
+	.get_params = lcm_get_params,
+	.init = lcm_init,
+	.suspend = lcm_suspend,
+	.resume = lcm_resume,
+	.init_power = lcm_init_power,
+	.resume_power = lcm_resume_power,
+	.suspend_power = lcm_suspend_power,
+	.compare_id = lcm_compare_id,
+	.set_backlight_cmdq = lcm_setbacklight_cmdq,
+	.ata_check = lcm_ata_check,
+	.update = lcm_update,
+	.set_hw_info = lcm_set_hw_info,
+#ifdef CONFIG_MI_ERRFLAG_ESD_CHECK_ENABLE
+	//.esd_recover = lcd_esd_recover,
+#endif
+};
+/* Huaqin add for HQ-148560 by caogaojie at 2021/9/30 end */
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_43_02_0b_dsc_vdo/dsi_panel_k19a_43_02_0b_dsc_vdo.c micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_43_02_0b_dsc_vdo/dsi_panel_k19a_43_02_0b_dsc_vdo.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/dsi_panel_k19a_43_02_0b_dsc_vdo/dsi_panel_k19a_43_02_0b_dsc_vdo.c	2023-09-30 14:32:16.948000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/dsi_panel_k19a_43_02_0b_dsc_vdo/dsi_panel_k19a_43_02_0b_dsc_vdo.c	2023-09-30 10:01:17.956000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -527,7 +526,9 @@
 	/* if mipi clock solution */
 	/* dfps_params[1].PLL_CLOCK = 380; */
 	/* dfps_params[1].data_rate = xx; */
-	dfps_params[1].vertical_frontporch = 54;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	dfps_params[1].vertical_frontporch = 46;
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 	dfps_params[1].vertical_frontporch_for_low_power = 2524;
 	/* Huaqin modify for HQ-124150 by caogaojie at 2021/06/07 end */
 	dsi->dfps_num = 2;
@@ -572,17 +573,19 @@
 
 	params->dsi.PS = LCM_PACKED_PS_24BIT_RGB888;
 
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
 	params->dsi.vertical_sync_active = 10;
 	params->dsi.vertical_backporch = 10;
-	params->dsi.vertical_frontporch = 54;
+	params->dsi.vertical_frontporch = 46;
 	//params->dsi.vertical_frontporch_for_low_power = 750;
 	params->dsi.vertical_active_line = FRAME_HEIGHT;
 
-	params->dsi.horizontal_sync_active = 22;
-	params->dsi.horizontal_backporch = 22;
-	params->dsi.horizontal_frontporch = 165;
+	params->dsi.horizontal_sync_active = 16;
+	params->dsi.horizontal_backporch = 16;
+	params->dsi.horizontal_frontporch = 148;
 	params->dsi.horizontal_active_pixel = FRAME_WIDTH;
 	params->dsi.ssc_disable = 1;
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 #ifdef CONFIG_MTK_MT6382_BDG
 	params->dsi.bdg_ssc_disable = 1;
 	params->dsi.dsc_params.ver = 17;
@@ -622,8 +625,10 @@
 #ifndef CONFIG_FPGA_EARLY_PORTING
 	/* this value must be in MTK suggested table */
 #ifdef DSC_ENABLE
-	params->dsi.bdg_dsc_enable = 1;
-	params->dsi.PLL_CLOCK = 380; //with dsc
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
+    params->dsi.bdg_dsc_enable = 1;
+    params->dsi.PLL_CLOCK = 360; //with dsc
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 #else
 	params->dsi.bdg_dsc_enable = 0;
 	params->dsi.PLL_CLOCK = 574; //without dsc
@@ -755,23 +760,24 @@
 	MDELAY(10);
 	/* Huaqin modify for HQ-132702 by caogaojie at 2021/06/15 end */
 	/* Huaqin modify for HQ-132702 by liunianliang at 2021/05/20 end */
-	/* Huaqin modify for HQ-144782 by caogaojie at 2021/07/05 start */
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 start */
 	if(esd_flag){
 		nvt_bootloader_reset_locked();
 		push_table(NULL, tp_reset_cmd1, ARRAY_SIZE(tp_reset_cmd1), 1);
-		MDELAY(100);
+		MDELAY(10);
 		nvt_esd_vdd_tp_recovery();
-		MDELAY(100);
+		MDELAY(20);
 		push_table(NULL, tp_reset_cmd2, ARRAY_SIZE(tp_reset_cmd2), 1);
-		MDELAY(50);
+		MDELAY(10);
 		esd_flag = false;
 		g_trigger_disp_esd_recovery = false;
 	}
-	/* Huaqin modify for HQ-144782 by caogaojie at 2021/07/05 end */
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 end */
 
 	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/14 start */
-	//2:PCBA_K19A_LA 8:PCBA_K19L_LA
-	if (hq_selene_pcba_config == 2 || hq_selene_pcba_config == 8){
+	/* Huaqin modify for HQ-155949 by caogaojie at 2021/09/18 start */
+	//2:PCBA_K19A_LA 8:PCBA_K19L_LA 13:PCBA_K19V_LA
+	if (hq_selene_pcba_config == 2 || hq_selene_pcba_config == 8 || hq_selene_pcba_config == 13){
 		push_table(NULL, init_setting_vdo_K19L, ARRAY_SIZE(init_setting_vdo_K19L), 1);
 		LCM_LOGI("%s this is K19L %d\n",__func__,hq_selene_pcba_config);
 	} else {
@@ -779,6 +785,7 @@
 		LCM_LOGI("%s this is the other config %d\n",__func__,hq_selene_pcba_config);
 	}
 	/* Huaqin modify for HQ-140017 by caogaojie at 2021/07/14 end */
+	/* Huaqin modify for HQ-155949 by caogaojie at 2021/09/18 end */
 }
 
 static void lcm_suspend(void)
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/mt65xx_lcm_list.c micode_selene-r-oss-update/drivers/misc/mediatek/lcm/mt65xx_lcm_list.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/mt65xx_lcm_list.c	2023-09-30 14:32:16.960000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/mt65xx_lcm_list.c	2023-09-30 10:01:17.980000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -29,6 +28,11 @@
 #define LCD_HW_ID_STATUS_ERROR  0x03
 
 struct LCM_DRIVER *lcm_driver_list[] = {
+/* Huaqin add for HQ-148596 by caogaojie at 2021/9/27 start */
+#if defined(DSI_PANEL_K19A_36_03_0C_DSC_VDO)
+	&dsi_panel_k19a_36_03_0c_dsc_vdo_lcm_drv,
+#endif
+/* Huaqin add for HQ-148596 by caogaojie at 2021/9/27 end */
 /*K19A HQ-123492 K19A LCD bring up by caogaojie at 2021/3/27 start*/
 #if defined(DSI_PANEL_K19A_36_02_0A_DSC_VDO)
 	&dsi_panel_k19a_36_02_0a_dsc_vdo_lcm_drv,
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/lcm/mt65xx_lcm_list.h micode_selene-r-oss-update/drivers/misc/mediatek/lcm/mt65xx_lcm_list.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/lcm/mt65xx_lcm_list.h	2023-09-30 14:32:16.960000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/lcm/mt65xx_lcm_list.h	2023-09-30 10:01:17.984000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -365,6 +364,9 @@
 /* Huaqin add for HQ-123491 by caogaojie at 2021/3/29 start */
 extern struct LCM_DRIVER dsi_panel_k19a_43_02_0b_dsc_vdo_lcm_drv;
 /* Huaqin add for HQ-123491 by caogaojie at 2021/3/29 end */
+/* Huaqin add for HQ-148596 by caogaojie at 2021/9/27 start */
+extern struct LCM_DRIVER dsi_panel_k19a_36_03_0c_dsc_vdo_lcm_drv;
+/* Huaqin add for HQ-148596 by caogaojie at 2021/9/27 end */
 #ifdef BUILD_LK
 extern void mdelay(unsigned long msec);
 #endif
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/leds/mt6768/mtk_leds.c micode_selene-r-oss-update/drivers/misc/mediatek/leds/mt6768/mtk_leds.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/leds/mt6768/mtk_leds.c	2023-09-30 14:32:16.988000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/leds/mt6768/mtk_leds.c	2023-09-30 10:01:18.016000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -847,9 +846,9 @@
 	case MT65XX_LED_MODE_CUST_LCM:
 		if (strcmp(cust->name, "lcd-backlight") == 0)
 			bl_brightness_hal = level;
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 start */
-		//printk(KERN_INFO "%s backlight control by LCM\n", __func__);
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 end */
+		/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 start */
+		//pr_debug(KERN_INFO "%s backlight control by LCM\n", __func__);
+		/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 end */
 		/* warning for this API revork */
 		return ((cust_brightness_set) (cust->data)) (level, bl_div_hal);
 
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/leds/mt6768/ti-lmu-backlight-core.c micode_selene-r-oss-update/drivers/misc/mediatek/leds/mt6768/ti-lmu-backlight-core.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/leds/mt6768/ti-lmu-backlight-core.c	2023-09-30 14:32:16.988000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/leds/mt6768/ti-lmu-backlight-core.c	2023-09-30 10:01:18.016000013 +0700
@@ -2,7 +2,6 @@
  * TI LMU (Lighting Management Unit) Backlight Driver
  *
  * Copyright 2016 Texas Instruments
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * Author: Milo Kim <milo.kim@ti.com>
  *
@@ -345,9 +344,9 @@
 					 brightness);
 		if (ret)
 			return ret;
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 start */
-		//pr_err("[bkl][after]11bit %s brightness = %d\n", __func__, brightness);
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 end */
+	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 start */
+		//pr_debug("[bkl][after]11bit %s brightness = %d\n", __func__, brightness);
+	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 end */
 		val = (brightness >> LMU_BACKLIGHT_11BIT_MSB_SHIFT) & 0xFF;
 	} else {
 		val = brightness & 0xFF;
@@ -381,9 +380,9 @@
 
 int lm3697_set_brightness(int brightness)
 {
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 start */
-	//printk(KERN_INFO "[bkl][before]%s brightness = %d\n", __func__, brightness);
-	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/07 end */
+	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 start */
+	//pr_debug("[bkl][before]11bit %s brightness = %d\n", __func__, brightness);
+	/* Huaqin modify for K19A-271 by caogaojie at 2021/07/08 end */
 	//return ti_lmu_backlight_update_brightness_register(bl_chip->lmu_bl, brightness);
 
 #ifdef CONFIG_TARGET_PRODUCT_MERLINCOMMON
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/simtray/simtray.c micode_selene-r-oss-update/drivers/misc/mediatek/simtray/simtray.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/simtray/simtray.c	2023-09-30 14:32:17.284000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/simtray/simtray.c	2023-09-30 10:01:19.568000013 +0700
@@ -14,7 +14,9 @@
 #include <linux/poll.h>
 #include <linux/slab.h>
 
-#define SIMTRAY_GPIO 371
+/* Huaqin modify for HQ-124268 by liunianliang at 2021/08/03 start */
+#define SIMTRAY_GPIO 372
+/* Huaqin modify for HQ-124268 by liunianliang at 2021/08/03 end */
 
 struct simtray_data {
 	struct device *dev;
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_fusb303.c micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_fusb303.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_fusb303.c	2023-09-30 14:32:17.372000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_fusb303.c	2023-09-30 10:01:20.184000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (c) 2018, ON Semiconductor Inc. All rights reserved.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * fusb303 USB TYPE-C Configuration Controller driver
  *
@@ -2285,10 +2284,6 @@
 	struct device *cdev = &g_client->dev;
 	int rc;
 	u8 type;
-/*K19A HQ-134474 K19A for typec mode by langjunjun at 2021/6/1 start*/
-	u8 status;
-/*K19A HQ-134474 K19A for typec mode by langjunjun at 2021/6/1 end*/
-
 
 	rc = i2c_smbus_read_byte_data(g_client,
 			FUSB303_REG_TYPE);
@@ -2302,54 +2297,19 @@
 	/*K19A HQ-134474 K19A for typec mode by langjunjun at 2021/6/1 start*/
 	switch (type) {
 	case FUSB303_TYPE_SRC:
-		*typec_mode = AUDIO_ADAPTER;
-		break;
 	case FUSB303_TYPE_SRC_ACC:
-		break;
 	case FUSB303_TYPE_DBG_ACC_SRC:
-		*typec_mode = DEBUG_ACCESSORY;
+		*typec_mode = 2;
 		break;
 	case FUSB303_TYPE_SNK:
-		*typec_mode = SINK_ATTACHED;
-		break;
 	case FUSB303_TYPE_DBG_ACC_SNK:
-		*typec_mode = DEBUG_ACCESSORY;
-		break;
-	case FUSB303_TYPE_ACTV_CABLE:
-		*typec_mode = POWERED_CABLE_W_O_SINK;
+		*typec_mode = 1;
 		break;
 	default:
 		*typec_mode = 0;
 		dev_err(cdev, "%s: Invaild type[0x%02x]\n", __func__, type);
 		break;
 	}
-	if(*typec_mode == 0) {
-		rc = i2c_smbus_read_byte_data(g_client,
-		FUSB303_REG_STATUS );
-		if (rc < 0) {
-			*typec_mode = 0;
-			dev_err(cdev, "%s: failed to read status\n", __func__);
-			return 0;
-		}
-		pr_err("%s: status reg [0x%02x]\n", __func__, rc);
-		status = rc & FUSB303_BCLVL_MASK;
-		pr_err("%s: status = %d \n", __func__, status);
-		switch (status*2) {
-		case FUSB303_SNK_DEFAULT:
-			*typec_mode = SOURCE_ATTACHED_DEFAULT_CURRENT;
-			break;
-		case FUSB303_SNK_1500MA:
-			*typec_mode = SOURCE_ATTACHED_MEDIUM_CURRENT;
-			break;
-		case FUSB303_SNK_3000MA:
-			*typec_mode = SOURCE_ATTACHED_HIGH_CURRENT;
-			break;
-		default:
-			*typec_mode = 0;
-			dev_err(cdev, "%s: Invaild status[0x%02x]\n", __func__, status);
-			break;
-		}
-	}
 	pr_err("dhx---fusb303 get typec mode type:%d, reg:%x\n", *typec_mode, type);
 	/*K19A HQ-134474 K19A for typec mode by langjunjun at 2021/6/1 end*/
 	return 0;
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_rt1711h.c micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_rt1711h.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_rt1711h.c	2023-09-30 14:32:17.376000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_rt1711h.c	2023-09-30 10:01:20.188000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2017 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * Richtek RT1711H Type-C Port Control Driver
  *
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_wusb3801.c micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_wusb3801.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/typec/tcpc/tcpc_wusb3801.c	2023-09-30 14:32:17.376000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/typec/tcpc/tcpc_wusb3801.c	2023-09-30 10:01:20.188000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2017 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * Mediatek wusb3801 Type-C Port Control Driver
  *
@@ -564,28 +563,10 @@
 	/*K19A HQ-134474 K19A for typec mode by langjunjun at 2021/6/1 start*/
 	switch (type) {
 	case WUSB3801_TYPE_SNK:
-		*typec_mode = AUDIO_ADAPTER;
+		*typec_mode = 2;
 		break;
 	case WUSB3801_TYPE_SRC:
-		*typec_mode = SINK_ATTACHED;
-		break;
-	case WUSB3801_TYPE_DBG_ACC:
-		*typec_mode = DEBUG_ACCESSORY;
-		break;
-	case WUSB3801_TYPE_AUD_ACC:
-		*typec_mode = WUSB3801_TYPE_AUD_ACC;
-		break;
-	case WUSB3801_SNK_DEFAULT:
-		*typec_mode = SOURCE_ATTACHED_DEFAULT_CURRENT;
-		break;
-	case WUSB3801_SNK_1500MA:
-		*typec_mode = SOURCE_ATTACHED_MEDIUM_CURRENT;
-		break;
-	case WUSB3801_SNK_3000MA:
-		*typec_mode = SOURCE_ATTACHED_HIGH_CURRENT;
-		break;
-	case WUSB3801_TYPE_INVALID:
-		*typec_mode = WUSB3801_TYPE_INVALID;
+		*typec_mode = 1;
 		break;
 	default:
 		*typec_mode = 0;
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.c	2023-09-30 14:32:17.448000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.c	2023-09-30 10:01:21.256000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -55,7 +54,9 @@
 struct DSI_TX_PHY_TIMCON3_REG timcon3;
 unsigned int bg_tx_data_phy_cycle = 0, tx_data_rate = 0, ap_tx_data_rate = 0;
 //unsigned int ap_tx_data_phy_cycle = 0;
-unsigned int hsa_byte = 0, hbp_byte = 0, hfp_byte = 0, bllp_byte = 0, bg_tx_line_cycle = 0;
+/* Huaqin modify for HQ-146521 by caogaojie at 2021/08/02 start */
+int hsa_byte = 0, hbp_byte = 0, hfp_byte = 0, bllp_byte = 0, bg_tx_line_cycle = 0;
+/* Huaqin modify for HQ-146521 by caogaojie at 2021/08/02 end */
 //unsigned int ap_tx_hsa_wc = 0, ap_tx_hbp_wc = 0, ap_tx_hfp_wc = 0, ap_tx_bllp_wc = 0;
 unsigned int dsc_en;
 unsigned int mt6382_init;
@@ -94,8 +95,22 @@
 	unsigned char count;
 	unsigned char para_list[256];
 };
-
-#define MM_CLK			546 //fpga=26
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
+int mtk_mm_clk = 0;
+int mtk_rxtx_ratio = 0;
+extern char *saved_command_line;
+int mtk_panel_compare()
+{
+    if (strstr(saved_command_line, "dsi_panel_k19a_43_02_0b_dsc_vdo_lcm_drv")) {
+        mtk_mm_clk = 405;
+        mtk_rxtx_ratio = 232;
+    } else {
+	mtk_mm_clk = 270;
+        mtk_rxtx_ratio = 225;
+    }
+    return 0;
+}
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 #define NS_TO_CYCLE(n, c)	((n) / (c) + (((n) % (c)) ? 1 : 0))
 
 #define DSI_MODULE_to_ID(x)	(x == DISP_BDG_DSI0 ? 0 : 1)
@@ -1469,8 +1484,12 @@
 int bdg_tx_vdo_timing_set(enum DISP_BDG_ENUM module,
 			void *cmdq, struct LCM_DSI_PARAMS *tx_params)
 {
-	int i;
-	u32 dsi_buf_bpp, data_init_byte;
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	int i,j;
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
+/* Huaqin modify for HQ-146521 by caogaojie at 2021/08/02 start */
+	u32 dsi_buf_bpp = 0, data_init_byte = 0;
+/* Huaqin modify for HQ-146521 by caogaojie at 2021/08/02 end */
 
 	DISPFUNCSTART();
 
@@ -1557,7 +1576,17 @@
 					(tx_params->vertical_backporch));
 		DSI_OUTREG32(cmdq, TX_REG[i]->DSI_TX_VFP_NL,
 					(tx_params->vertical_frontporch));
-
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+#ifdef CONFIG_MTK_HIGH_FRAME_RATE
+		for (j = 0; j < DFPS_LEVELS; j++) {
+			if (tx_params->dfps_params[j].fps == 9000) {
+				DSI_OUTREG32(cmdq, TX_REG[i]->DSI_TX_VFP_NL,
+					(tx_params->dfps_params[j].vertical_frontporch));
+				break;
+			}
+		}
+#endif
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 		DSI_OUTREG32(cmdq, TX_REG[i]->DSI_TX_HSA_WC, hsa_byte);
 		DSI_OUTREG32(cmdq, TX_REG[i]->DSI_TX_HBP_WC, hbp_byte);
 		DSI_OUTREG32(cmdq, TX_REG[i]->DSI_TX_HFP_WC, hfp_byte);
@@ -1986,12 +2015,14 @@
 int bdg_dsi_line_timing_dphy_setting(enum DISP_BDG_ENUM module,
 			void *cmdq, struct LCM_DSI_PARAMS *tx_params)
 {
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
 	unsigned int width, height, lanes, ps_wc, new_hfp_byte;
 	unsigned int bg_tx_total_word_cnt = 0;
 	unsigned int bg_tx_line_time = 0, disp_pipe_line_time = 0;
 	unsigned int rxtx_ratio = 0;
 //	unsigned int ap_tx_total_word_cnt = 0, ap_tx_total_word_cnt_no_hfp_wc = 0;
 
+	mtk_panel_compare();
 	DISPFUNCSTART();
 	width = tx_params->horizontal_active_pixel / 1;
 	height = tx_params->vertical_active_line;
@@ -2002,12 +2033,13 @@
 	if (dsc_en) {
 //		ps_wc = width;
 		ps_wc = width * 24 / 8 / 3;	/* for 8bpp, 1/3 compression */
-		rxtx_ratio = RXTX_RATIO;	/* ratio=2.30 */
+		rxtx_ratio = mtk_rxtx_ratio;        /* ratio=2.30 */
 	} else {
 		ps_wc = width * 24 / 8;	/* for 8bpp, 1/3 compression */
 		rxtx_ratio = 100;
 	}
 	new_hfp_byte = hfp_byte;
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 
 	DISPMSG("%s, dsc_en=%d, hsa_byte=%d, hbp_byte=%d\n",
 		__func__, dsc_en, hsa_byte, hbp_byte);
@@ -2055,7 +2087,9 @@
 	bg_tx_line_cycle = (bg_tx_total_word_cnt + (lanes - 1)) / lanes;
 	bg_tx_line_time = bg_tx_line_cycle * 8000 / tx_data_rate;
 
-	disp_pipe_line_time = width * 1000 / MM_CLK;
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
+	disp_pipe_line_time = width * 1000 / mtk_mm_clk;
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 
 	DISPMSG("bg_tx_total_word_cnt=%d, bg_tx_line_cycle=%d\n",
 		bg_tx_total_word_cnt, bg_tx_line_cycle);
@@ -4464,10 +4498,10 @@
 
 		if (ipi_mode_qst)
 			DSI_OUTREG32(cmdq, DSI2_REG->DSI2_DEVICE_IPI_MODE_CFG_OS, 1);
-
-		t_ipi_clk  = 1000 / MM_CLK;
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
+		t_ipi_clk  = 1000 / mtk_mm_clk;
 		//t_hact_ipi = frame_width * t_ipi_clk;
-		t_hact_ipi = frame_width * 1000 / MM_CLK;
+		t_hact_ipi = frame_width * 1000 / mtk_mm_clk;
 		if (tx_params->IsCphy) { //c-phy
 			temp = 7000;
 			t_ppi_clk = temp / ap_tx_data_rate;
@@ -4484,13 +4518,13 @@
 
 		if (t_hact_ppi > t_hact_ipi)
 //ipi_tx_delay_qst = ((t_hact_ppi - t_hact_ipi) / t_ipi_clk + 20 * (t_ppi_clk / t_ipi_clk) + 4);
-//ipi_tx_delay_qst = ((t_hact_ppi - t_hact_ipi) * MM_CLK / 1000 + 20 *
-//(temp * MM_CLK / tx_data_rate / 1000) + 4);
-			ipi_tx_delay_qst = ((t_hact_ppi - t_hact_ipi) * MM_CLK +
-					20 * temp * MM_CLK / ap_tx_data_rate) / 1000 + 4;
+//ipi_tx_delay_qst = ((t_hact_ppi - t_hact_ipi) * mtk_mm_clk / 1000 + 20 *
+//(temp * mtk_mm_clk / tx_data_rate / 1000) + 4);
+			ipi_tx_delay_qst = ((t_hact_ppi - t_hact_ipi) * mtk_mm_clk +
+					20 * temp * mtk_mm_clk / ap_tx_data_rate) / 1000 + 4;
 		else
-		//ipi_tx_delay_qst =  (20 * (temp * MM_CLK / tx_data_rate / 1000) + 4);
-			ipi_tx_delay_qst =  20 * temp * MM_CLK /
+		//ipi_tx_delay_qst =  (20 * (temp * mtk_mm_clk / tx_data_rate / 1000) + 4);
+			ipi_tx_delay_qst =  20 * temp * mtk_mm_clk /
 				ap_tx_data_rate / 1000 + 4;
 
 		DISPINFO("ap_tx_data_rate=%d, temp=%d, t_ppi_clk=%d, t_ipi_clk=%d\n",
@@ -4498,7 +4532,8 @@
 		DISPINFO("t_hact_ppi=%d, t_hact_ipi=%d\n", t_hact_ppi, t_hact_ipi);
 
 		//t_ipi_tx_delay = ipi_tx_delay_qst_i * t_ipi_clk;
-		t_ipi_tx_delay = ipi_tx_delay_qst * 1000 / MM_CLK;
+		t_ipi_tx_delay = ipi_tx_delay_qst * 1000 / mtk_mm_clk;
+	/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 
 		DISPINFO("ipi_tx_delay_qst=%d, t_ipi_tx_delay=%d\n",
 			ipi_tx_delay_qst, t_ipi_tx_delay);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.h micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.h	2023-09-30 14:32:17.448000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_disp_bdg.h	2023-09-30 10:01:21.256000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -32,11 +31,6 @@
 //#define _G_MODE_EN_
 //#define _RX_V12_
 //#define _HIGH_FRM_
-#ifdef _HIGH_FRM_	 //for cmd 120Hz
-#define RXTX_RATIO		(299)
-#else
-#define RXTX_RATIO		(225) //for vdo 90Hz
-#endif
 
 enum DISP_BDG_ENUM {
 	DISP_BDG_DSI0 = 0,
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_drv.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_drv.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_drv.c	2023-09-30 14:32:17.448000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_drv.c	2023-09-30 10:01:22.320000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_dsi.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_dsi.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/dispsys/ddp_dsi.c	2023-09-30 14:32:17.448000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/dispsys/ddp_dsi.c	2023-09-30 10:01:22.376000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -878,7 +877,9 @@
 		if (type == DSI_VFP) {
 			DISPINFO("set dsi%d vfp to %d\n", i, value);
 			DSI_OUTREG32(handle, &DSI_REG[i]->DSI_VFP_NL, value);
-			if (bdg_is_bdg_connected() == 1)
+		/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+			if (pgc->vfp_chg_sync_bdg && bdg_is_bdg_connected() == 1)
+		/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 				ddp_dsi_set_bdg_porch_setting(module, handle, value);
 		/* Huaqin modify for HQ-141505 by caogaojie at 2021/06/18 start */
 			if(value == 54){
@@ -948,6 +949,9 @@
 	}
 }
 
+/* Huaqin add for K19S-31 by jiangyue at 2022/01/14 start */
+extern int mtk_rxtx_ratio;
+/* Huaqin add for K19S-31 by jiangyue at 2022/01/14 end */
 void DSI_Config_VDO_Timing_with_DSC(enum DISP_MODULE_ENUM module,
 	struct cmdqRecStruct *cmdq, struct LCM_DSI_PARAMS *dsi_params)
 {
@@ -1023,7 +1027,9 @@
 		t_hbp = 4;
 		ps_wc = dsi_params->horizontal_active_pixel * dsiTmpBufBpp / 8;
 		t_hbllp = 16 * dsi_params->LANE_NUM;
-		ap_tx_total_word_cnt = (get_bdg_line_cycle() * lanes * RXTX_RATIO + 99) / 100;
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 start */
+		ap_tx_total_word_cnt = (get_bdg_line_cycle() * lanes * mtk_rxtx_ratio + 99) / 100;
+/* Huaqin modify for K19S-31 by jiangyue at 2022/01/14 end */
 
 		switch (dsi_params->mode) {
 		case DSI_CMD_MODE:
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/disp_lowpower.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/disp_lowpower.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/disp_lowpower.c	2023-09-30 14:32:17.464000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/disp_lowpower.c	2023-09-30 10:01:22.404000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -374,7 +373,9 @@
 	}
 
 	if (state == 1 || state == 0) {
-		if (bdg_is_bdg_connected() == 1) {
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+		if (pgc->vfp_chg_sync_bdg && bdg_is_bdg_connected() == 1) {
+	/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 			cmdqRecWait(handle, CMDQ_EVENT_MUTEX0_STREAM_EOF);
 
 			/* 2.stop dsi vdo mode */
@@ -398,10 +399,10 @@
 						DDP_DSI_PORCH_CHANGE, &apply_vfp);
 		}
 	}
-/* Huaqin modify for HQ-141739 by caogaojie at 2021/07/05 start */
-	if (bdg_is_bdg_connected() != 1)
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	if (!pgc->vfp_chg_sync_bdg)
 		cmdqRecFlushAsync(handle);
-/* Huaqin modify for HQ-141739 by caogaojie at 2021/07/05 end*/
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 	cmdqRecDestroy(handle);
 	return ret;
 }
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/disp_recovery.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/disp_recovery.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/disp_recovery.c	2023-09-30 14:32:17.464000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/disp_recovery.c	2023-09-30 10:01:22.404000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2016 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -70,7 +69,9 @@
 #include "disp_partial.h"
 #include "ddp_dsi.h"
 #include "ddp_disp_bdg.h"
-
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+bool esd_flag;
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
 /* For abnormal check */
 static struct task_struct *primary_display_check_task;
 /* used for blocking check task  */
@@ -712,6 +713,9 @@
 /* Huaqin modify for HQ-124138 by dongtingchi at 2021/04/29 start */
 #ifndef CONFIG_MI_ERRFLAG_ESD_CHECK_ENABLE
 	int recovery_done = 0;
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+	esd_flag = false;
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
 #endif
 /* Huaqin modify for HQ-124138 by dongtingchi at 2021/04/29 end */
 
@@ -781,9 +785,9 @@
 #else
 	while (1) {
 next:		if(!atomic_read(&lcm_ready)){
-	/* Huaqin modify for HQ-138988 by caogaojie at 2021/07/09 start */
-			msleep(2000);
-	/* Huaqin modify for HQ-138988 by caogaojie at 2021/07/09 end */
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 start */
+			msleep(700);
+	/* Huaqin modify for HQ-161950 by jiangyue at 2021/11/05 end */
 			continue;
 		}
 		DISPINFO("[ESD] primary_display_check_recovery_worker_kthread start 2");
@@ -797,6 +801,10 @@
 			DISPERR(
 				"[ESD]esd check fail, will do esd recovery. try=%d\n",
 				i);
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 start*/
+			esd_flag = true;
+			DISPERR("[ESD]Now esd_flag = %d\n",esd_flag);
+/*K19S code for HQ-168893 by gaoxue at 2021/11/23 end*/
 			primary_display_esd_recovery();
 			goto next;
 		} while (++i < esd_try_cnt);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/primary_display.c micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/primary_display.c
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/primary_display.c	2023-09-30 14:32:17.472000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/primary_display.c	2023-09-30 10:01:22.416000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -4465,6 +4464,9 @@
 
 	pgc->lcm_fps = lcm_fps;
 	pgc->lcm_refresh_rate = 60;
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+	pgc->vfp_chg_sync_bdg = false;
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 	/* keep lowpower init after setting lcm_fps */
 	primary_display_lowpower_init();
 
@@ -10542,8 +10544,9 @@
 			return;
 		}
 		cmdqRecReset(qhandle);
-
-		if (bdg_is_bdg_connected() != 1) {
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+		if (!pgc->vfp_chg_sync_bdg) {
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 			if (need_send_cmd) {
 				cmdqRecWait(qhandle, CMDQ_EVENT_MUTEX0_STREAM_EOF);
 				DISPMSG("%s,send cmd to lcm in VFP solution\n", __func__);
@@ -10557,8 +10560,10 @@
 
 			cmdqRecFlushAsync(qhandle);
 		} else {
-			cmdqRecWait(qhandle, CMDQ_EVENT_MUTEX0_STREAM_EOF);
-
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+			if (bdg_is_bdg_connected() == 1) {
+				cmdqRecWait(qhandle, CMDQ_EVENT_MUTEX0_STREAM_EOF);
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 			/* stop dsi vdo mode */
 			dpmgr_path_build_cmdq(primary_get_dpmgr_handle(),
 				qhandle, CMDQ_STOP_VDO_MODE, 0);
@@ -10573,8 +10578,10 @@
 
 			ddp_mutex_set_sof_wait(dpmgr_path_get_mutex(
 				primary_get_dpmgr_handle()), qhandle, 0);
-
-			cmdqRecFlush(qhandle);
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 start */
+				cmdqRecFlush(qhandle);
+			}
+/* Huaqin modify for HQ-179522 by jiangyue at 2022/01/24 end */
 		}
 	}
 	cmdqRecDestroy(qhandle);
diff -Naur old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/primary_display.h micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/primary_display.h
--- old-micode_selene-r-oss/drivers/misc/mediatek/video/mt6768/videox/primary_display.h	2023-09-30 14:32:17.472000191 +0700
+++ micode_selene-r-oss-update/drivers/misc/mediatek/video/mt6768/videox/primary_display.h	2023-09-30 10:01:22.420000013 +0700
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2015 MediaTek Inc.
- * Copyright (C) 2021 XiaoMi, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -287,6 +286,10 @@
 	unsigned int first_cfg;
 	/*DynFPS end*/
 #endif
+/* Huaqin add for HQ-179522 by jiangyue at 2022/01/24 start */
+	/* change vfp for ap dsi and 6382 at same time */
+	bool vfp_chg_sync_bdg;
+/* Huaqin add for HQ-179522 by jiangyue at 2022/01/24 end */
 };
 
 static inline char *lcm_power_state_to_string(enum lcm_power_state ps)
